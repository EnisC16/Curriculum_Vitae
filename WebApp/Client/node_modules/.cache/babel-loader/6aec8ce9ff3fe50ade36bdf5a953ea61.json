{"ast":null,"code":"import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nimport common_de from \"./de/common.json\";\nimport common_en from \"./en/common.json\";\nimport common_tr from \"./tr/common.json\";\nconst availableLanguages = ['en', 'de'];\nconst options = {\n  // order and from where user language should be detected\n  order: ['navigator', 'htmlTag', 'path', 'subdomain'],\n  // keys or params to lookup language from\n  lookupQuerystring: 'lng',\n  lookupCookie: 'i18next',\n  lookupLocalStorage: 'i18nextLng',\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n  // cache user language on\n  caches: ['localStorage', 'cookie'],\n  excludeCacheFor: ['cimode'],\n  // languages to not persist (cookie, localStorage)\n  // optional expire and domain for set cookie\n  cookieMinutes: 10,\n  cookieDomain: 'myDomain',\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement,\n  // only detect languages that are in the whitelist\n  checkWhitelist: true\n};\ni18n.use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\n.use(LanguageDetector) // detect user language\n.use(initReactI18next) // pass the i18n instance to react-i18next.\n.init({\n  fallbackLng: 'en',\n  // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\n  debug: true,\n  whitelist: availableLanguages,\n  detection: options,\n  interpolation: {\n    escapeValue: false\n  },\n  lng: 'en',\n  // language to use\n  resources: {\n    en: {\n      common: common_en // 'common' is our custom namespace\n\n    },\n    de: {\n      common: common_de\n    }\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["C:/Users/enisc/Desktop/WebApp/Client/src/components/translation/i18next.js"],"names":["i18n","Backend","LanguageDetector","initReactI18next","common_de","common_en","common_tr","availableLanguages","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","use","init","fallbackLng","debug","whitelist","detection","interpolation","escapeValue","lng","resources","en","common","de"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,MAAMC,kBAAkB,GAAG,CAAC,IAAD,EAAO,IAAP,CAA3B;AAEA,MAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,KAAK,EAAE,CAAE,WAAF,EAAe,SAAf,EAA0B,MAA1B,EAAkC,WAAlC,CAFO;AAId;AACAC,EAAAA,iBAAiB,EAAE,KALL;AAMdC,EAAAA,YAAY,EAAE,SANA;AAOdC,EAAAA,kBAAkB,EAAE,YAPN;AAQdC,EAAAA,mBAAmB,EAAE,CARP;AASdC,EAAAA,wBAAwB,EAAE,CATZ;AAWd;AACAC,EAAAA,MAAM,EAAE,CAAC,cAAD,EAAiB,QAAjB,CAZM;AAadC,EAAAA,eAAe,EAAE,CAAC,QAAD,CAbH;AAae;AAE7B;AACAC,EAAAA,aAAa,EAAE,EAhBD;AAiBdC,EAAAA,YAAY,EAAE,UAjBA;AAmBd;AACAC,EAAAA,OAAO,EAAEC,QAAQ,CAACC,eApBJ;AAsBd;AACAC,EAAAA,cAAc,EAAE;AAvBF,CAAhB;AA0BAtB,IAAI,CACDuB,GADH,CACOtB,OADP,EACgB;AADhB,CAGGsB,GAHH,CAGOrB,gBAHP,EAGyB;AAHzB,CAKGqB,GALH,CAKOpB,gBALP,EAKyB;AALzB,CAOGqB,IAPH,CAOQ;AACJC,EAAAA,WAAW,EAAE,IADT;AACe;AACnBC,EAAAA,KAAK,EAAE,IAFH;AAGJC,EAAAA,SAAS,EAAEpB,kBAHP;AAIJqB,EAAAA,SAAS,EAAEpB,OAJP;AAMJqB,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE;AADA,GANX;AAUJC,EAAAA,GAAG,EAAE,IAVD;AAUoC;AACtCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,EAAE,EAAE;AACAC,MAAAA,MAAM,EAAE7B,SADR,CACgC;;AADhC,KADG;AAIP8B,IAAAA,EAAE,EAAE;AACAD,MAAAA,MAAM,EAAE9B;AADR;AAJG;AAXT,CAPR;AA4BA,eAAeJ,IAAf","sourcesContent":["import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport common_de from \"./de/common.json\";\r\nimport common_en from \"./en/common.json\";\r\nimport common_tr from \"./tr/common.json\";\r\n\r\nconst availableLanguages = ['en', 'de'];\r\n\r\nconst options = {\r\n  // order and from where user language should be detected\r\n  order: [ 'navigator', 'htmlTag', 'path', 'subdomain'],\r\n\r\n  // keys or params to lookup language from\r\n  lookupQuerystring: 'lng',\r\n  lookupCookie: 'i18next',\r\n  lookupLocalStorage: 'i18nextLng',\r\n  lookupFromPathIndex: 0,\r\n  lookupFromSubdomainIndex: 0,\r\n\r\n  // cache user language on\r\n  caches: ['localStorage', 'cookie'],\r\n  excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\r\n\r\n  // optional expire and domain for set cookie\r\n  cookieMinutes: 10,\r\n  cookieDomain: 'myDomain',\r\n\r\n  // optional htmlTag with lang attribute, the default is:\r\n  htmlTag: document.documentElement,\r\n\r\n  // only detect languages that are in the whitelist\r\n  checkWhitelist: true\r\n}\r\n\r\ni18n\r\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\r\n\r\n  .use(LanguageDetector) // detect user language\r\n\r\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\r\n\r\n  .init({\r\n    fallbackLng: 'en', // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\r\n    debug: true,\r\n    whitelist: availableLanguages,\r\n    detection: options,\r\n\r\n    interpolation: {\r\n      escapeValue: false\r\n    },\r\n\r\n    lng: 'en',                              // language to use\r\n      resources: {\r\n          en: {\r\n              common: common_en               // 'common' is our custom namespace\r\n          },\r\n          de: {\r\n              common: common_de\r\n          },\r\n      },\r\n  });\r\n\r\nexport default i18n;"]},"metadata":{},"sourceType":"module"}