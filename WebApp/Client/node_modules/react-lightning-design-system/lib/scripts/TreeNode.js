"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeNode = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = require("./Button");

var _Spinner = require("./Spinner");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var TreeNode = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(TreeNode, _Component);

  var _super = _createSuper(TreeNode);

  function TreeNode(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TreeNode);
    _this = _super.call(this, props);
    _this.state = {
      opened: _this.props.defaultOpened
    };
    return _this;
  }

  (0, _createClass2["default"])(TreeNode, [{
    key: "onToggle",
    value: function onToggle(e) {
      var _this$props = this.props,
          onToggle = _this$props.onToggle,
          onNodeToggle = _this$props.onNodeToggle;

      if (onToggle) {
        onToggle(e, this.props);
      }

      if (onNodeToggle) {
        onNodeToggle(e, this.props);
      }

      this.setState(function (prevState) {
        return {
          opened: !prevState.opened
        };
      });
    }
  }, {
    key: "onLabelClick",
    value: function onLabelClick(e) {
      var _this$props2 = this.props,
          onLabelClick = _this$props2.onLabelClick,
          onNodeLabelClick = _this$props2.onNodeLabelClick;

      if (onLabelClick) {
        onLabelClick(e, this.props);
      }

      if (onNodeLabelClick) {
        onNodeLabelClick(e, this.props);
      }
    }
  }, {
    key: "onClick",
    value: function onClick(e) {
      var _this$props3 = this.props,
          onClick = _this$props3.onClick,
          onNodeClick = _this$props3.onNodeClick,
          toggleOnNodeClick = _this$props3.toggleOnNodeClick;

      if (onClick) {
        onClick(e, this.props);
      }

      if (onNodeClick) {
        onNodeClick(e, this.props);
      }

      if (toggleOnNodeClick) {
        this.onToggle(e);
      }
    }
  }, {
    key: "renderTreeItem",
    value: function renderTreeItem(itemProps) {
      var className = itemProps.className,
          label = itemProps.label,
          _itemProps$icon = itemProps.icon,
          icon = _itemProps$icon === void 0 ? 'chevronright' : _itemProps$icon,
          loading = itemProps.loading,
          selected = itemProps.selected,
          leaf = itemProps.leaf,
          isOpened = itemProps.isOpened,
          children = itemProps.children,
          itemRender = itemProps.itemRender,
          onNodeClick = itemProps.onNodeClick,
          onNodeToggle = itemProps.onNodeToggle,
          onNodeLabelClick = itemProps.onNodeLabelClick,
          toggleOnNodeClick = itemProps.toggleOnNodeClick,
          props = (0, _objectWithoutProperties2["default"])(itemProps, ["className", "label", "icon", "loading", "selected", "leaf", "isOpened", "children", "itemRender", "onNodeClick", "onNodeToggle", "onNodeLabelClick", "toggleOnNodeClick"]);
      var itmClassNames = (0, _classnames["default"])(className, 'slds-tree__item', {
        'slds-is-open': isOpened,
        'slds-is-selected': selected
      });
      return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
        className: itmClassNames,
        onClick: this.onClick.bind(this),
        style: {
          position: 'relative'
        }
      }, props), loading ? /*#__PURE__*/_react["default"].createElement(_Spinner.Spinner, {
        container: false,
        size: "small",
        className: "slds-m-right_x-small",
        style: {
          position: 'static',
          marginTop: 14,
          marginLeft: -2
        }
      }) : !leaf ? /*#__PURE__*/_react["default"].createElement(_Button.Button, {
        className: "slds-m-right_small",
        "aria-controls": "",
        type: "icon-bare",
        icon: icon,
        iconSize: "small",
        onClick: this.onToggle.bind(this)
      }) : null, /*#__PURE__*/_react["default"].createElement("a", {
        className: "slds-truncate",
        tabIndex: -1,
        role: "presentation",
        onClick: this.onLabelClick.bind(this)
      }, itemRender ? itemRender(itemProps) : label), leaf ? children : null);
    }
  }, {
    key: "renderChildNode",
    value: function renderChildNode(level, tnode) {
      var _this$props4 = this.props,
          onNodeClick = _this$props4.onNodeClick,
          onNodeToggle = _this$props4.onNodeToggle,
          onNodeLabelClick = _this$props4.onNodeLabelClick,
          toggleOnNodeClick = _this$props4.toggleOnNodeClick;
      return /*#__PURE__*/_react["default"].cloneElement(tnode, {
        level: level,
        onNodeClick: onNodeClick,
        onNodeToggle: onNodeToggle,
        onNodeLabelClick: onNodeLabelClick,
        toggleOnNodeClick: toggleOnNodeClick
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          defaultOpened = _this$props5.defaultOpened,
          opened = _this$props5.opened,
          leaf = _this$props5.leaf,
          _this$props5$level = _this$props5.level,
          level = _this$props5$level === void 0 ? 1 : _this$props5$level,
          children = _this$props5.children,
          props = (0, _objectWithoutProperties2["default"])(_this$props5, ["defaultOpened", "opened", "leaf", "level", "children"]);
      var isOpened = typeof opened !== 'undefined' ? opened : typeof this.state.opened !== 'undefined' ? this.state.opened : defaultOpened;
      var grpClassNames = (0, _classnames["default"])('slds-tree__group', {
        'slds-nested': !leaf,
        'is-expanded': isOpened,
        'slds-show': isOpened,
        'slds-hide': !isOpened
      });

      var itemProps = _objectSpread({
        leaf: leaf,
        isOpened: isOpened,
        children: children
      }, props);

      if (leaf) {
        return /*#__PURE__*/_react["default"].createElement("li", {
          role: "treeitem",
          "aria-level": level
        }, this.renderTreeItem(itemProps));
      }

      return /*#__PURE__*/_react["default"].createElement("li", {
        role: "treeitem",
        "aria-level": level,
        "aria-expanded": isOpened
      }, this.renderTreeItem(itemProps), /*#__PURE__*/_react["default"].createElement("ul", {
        className: grpClassNames,
        role: "group"
      }, _react["default"].Children.map(children, this.renderChildNode.bind(this, level + 1))));
    }
  }]);
  return TreeNode;
}(_react.Component);

exports.TreeNode = TreeNode;
//# sourceMappingURL=TreeNode.js.map