{"version":3,"sources":["../../src/scripts/Button.tsx"],"names":["ICON_SIZES","ICON_ALIGNS","Button","props","onClick","bind","e","node","focus","iconSize","inv","icon","iconAlign","type","inverse","test","iconMore","label","children","adjoining","iconMoreSize","className","size","selected","alt","loading","htmlType","buttonRef","typeClassName","btnClassNames","renderIcon","renderIconMore","Component","ButtonIcon","align","style","alignClassName","indexOf","sizeClassName","inverseClassName","iconClassNames"],"mappings":"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","sourcesContent":["import React, { Component, ReactNode, ButtonHTMLAttributes } from 'react';\nimport classnames from 'classnames';\nimport { Icon } from './Icon';\nimport { Spinner } from './Spinner';\n\nexport type ButtonType =\n  | 'neutral'\n  | 'brand'\n  | 'destructive'\n  | 'inverse'\n  | 'icon'\n  | 'icon-bare'\n  | 'icon-container'\n  | 'icon-inverse'\n  | 'icon-more'\n  | 'icon-border'\n  | 'icon-border-filled'\n  | 'icon-border-inverse';\n\nconst ICON_SIZES = ['x-small', 'small', 'medium', 'large'] as const;\nconst ICON_ALIGNS = ['left', 'right'] as const;\n\nexport type ButtonSize = 'x-small' | 'small' | 'medium' | 'large';\nexport type ButtonIconSize = typeof ICON_SIZES[number];\nexport type ButtonIconAlign = typeof ICON_ALIGNS[number];\nexport type ButtonIconMoreSize = 'x-small' | 'small' | 'medium' | 'large';\n\nexport type ButtonProps = {\n  label?: ReactNode;\n  alt?: string;\n  type?: ButtonType;\n  size?: ButtonSize;\n  htmlType?: 'button' | 'submit' | 'reset';\n  selected?: boolean;\n  inverse?: boolean;\n  loading?: boolean;\n  icon?: string;\n  iconSize?: ButtonIconSize;\n  iconAlign?: ButtonIconAlign;\n  iconMore?: string;\n  iconMoreSize?: ButtonIconMoreSize;\n  buttonRef?: (node: HTMLButtonElement) => void;\n} & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type'>;\n\nexport class Button extends Component<ButtonProps, {}> {\n  node: HTMLButtonElement | null = null;\n\n  constructor(props: Readonly<ButtonProps>) {\n    super(props);\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    if (this.node !== null) {\n      // Safari, FF to trigger focus event on click\n      this.node.focus();\n    }\n    const { onClick } = this.props;\n    if (onClick) onClick(e);\n  }\n\n  renderIcon(iconSize: ButtonProps['iconSize'], inv: ButtonProps['inverse']) {\n    const { icon, iconAlign, type } = this.props;\n    const inverse = inv || /-?inverse$/.test(type || '');\n    return (\n      <ButtonIcon\n        icon={icon!}\n        align={iconAlign}\n        size={iconSize}\n        inverse={inverse}\n      />\n    );\n  }\n\n  renderIconMore() {\n    const { iconMore, icon, iconAlign, label, children } = this.props;\n    const adjoining = icon && (iconAlign === 'right' || !(label || children));\n    const iconMoreSize =\n      this.props.iconMoreSize || adjoining ? 'x-small' : 'small';\n    return <ButtonIcon icon={iconMore!} align='right' size={iconMoreSize} />;\n  }\n\n  render() {\n    const {\n      className,\n      type,\n      size,\n      icon,\n      iconAlign,\n      iconMore,\n      selected,\n      alt,\n      label,\n      loading,\n      iconSize,\n      inverse,\n      htmlType = 'button',\n      children,\n      buttonRef,\n      ...props\n    } = this.props;\n    const typeClassName = type ? `slds-button_${type}` : null;\n    const btnClassNames = classnames(className, 'slds-button', typeClassName, {\n      'slds-is-selected': selected,\n      [`slds-button_icon-${size}`]:\n        /^(x-small|small)$/.test(size || '') && /^icon-/.test(type || ''),\n    });\n\n    return (\n      // eslint-disable-next-line react/button-has-type\n      <button\n        ref={(node: HTMLButtonElement) => {\n          this.node = node;\n          if (buttonRef) buttonRef(node);\n        }}\n        className={btnClassNames}\n        type={htmlType}\n        {...props}\n        onClick={this.onClick}\n      >\n        {icon && iconAlign !== 'right'\n          ? this.renderIcon(iconSize, inverse)\n          : null}\n        {children || label}\n        {icon && iconAlign === 'right'\n          ? this.renderIcon(iconSize, inverse)\n          : null}\n        {iconMore ? this.renderIconMore() : null}\n        {alt ? <span className='slds-assistive-text'>{alt}</span> : null}\n        {loading ? <Spinner /> : null}\n      </button>\n    );\n  }\n}\n\nexport type ButtonIconProps = {\n  className?: string;\n  icon: string;\n  align?: ButtonIconAlign;\n  size?: ButtonIconSize;\n  inverse?: boolean;\n  style?: object;\n};\n\nexport const ButtonIcon: React.FC<ButtonIconProps> = ({\n  icon,\n  align,\n  size,\n  inverse,\n  className,\n  style,\n  ...props\n}) => {\n  const alignClassName =\n    align && ICON_ALIGNS.indexOf(align) >= 0\n      ? `slds-button__icon_${align}`\n      : null;\n  const sizeClassName =\n    size && ICON_SIZES.indexOf(size) >= 0 ? `slds-button__icon_${size}` : null;\n  const inverseClassName = inverse ? 'slds-button__icon_inverse' : null;\n  const iconClassNames = classnames(\n    'slds-button__icon',\n    alignClassName,\n    sizeClassName,\n    inverseClassName,\n    className\n  );\n  return (\n    <Icon\n      className={iconClassNames}\n      icon={icon}\n      textColor={null}\n      pointerEvents='none'\n      style={style}\n      {...props}\n    />\n  );\n};\n"],"file":"Button.js"}