"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Row = exports.Col = exports.Grid = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Grid = function Grid(_ref) {
  var className = _ref.className,
      frame = _ref.frame,
      vertical = _ref.vertical,
      children = _ref.children,
      tag = _ref.tag,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["className", "frame", "vertical", "children", "tag"]);
  var gridClassNames = (0, _classnames["default"])(className, 'slds-grid', vertical ? 'slds-grid_vertical' : null, frame ? 'slds-grid_frame' : null);
  var Tag = tag || 'div';
  return /*#__PURE__*/_react["default"].createElement(Tag, (0, _extends2["default"])({
    className: gridClassNames
  }, props), children);
};

exports.Grid = Grid;
Grid.defaultProps = {
  vertical: true
};

function adjustCols(colNum, large) {
  if (colNum > 6) {
    return large ? 12 : 6;
  }

  return colNum;
}

var Col = function Col(props) {
  var className = props.className,
      padded = props.padded,
      align = props.align,
      noFlex = props.noFlex,
      order = props.order,
      orderSmall = props.orderSmall,
      orderMedium = props.orderMedium,
      orderLarge = props.orderLarge,
      cols = props.cols,
      colsSmall = props.colsSmall,
      colsMedium = props.colsMedium,
      colsLarge = props.colsLarge,
      totalCols = props.totalCols,
      totalColsSmall = props.totalColsSmall,
      totalColsMedium = props.totalColsMedium,
      totalColsLarge = props.totalColsLarge,
      children = props.children,
      pprops = (0, _objectWithoutProperties2["default"])(props, ["className", "padded", "align", "noFlex", "order", "orderSmall", "orderMedium", "orderLarge", "cols", "colsSmall", "colsMedium", "colsLarge", "totalCols", "totalColsSmall", "totalColsMedium", "totalColsLarge", "children"]);
  var rowClassNames = (0, _classnames["default"])(className, padded ? "slds-col_padded".concat(typeof padded === 'string' && /^(medium|large)$/.test(padded) ? "-".concat(padded) : '') : 'slds-col', align ? "slds-align-".concat(align) : null, noFlex ? 'slds-no-flex' : null, order ? "slds-order_".concat(order) : null, orderSmall ? "slds-small-order_".concat(orderSmall) : null, orderMedium ? "slds-medium-order_".concat(orderMedium) : null, orderLarge ? "slds-large-order_".concat(orderLarge) : null, cols && totalCols ? "slds-size_".concat(cols, "-of-").concat(adjustCols(totalCols, true)) : null, colsSmall && totalColsSmall ? "slds-small-size_".concat(colsSmall, "-of-").concat(adjustCols(totalColsSmall)) : null, colsMedium && totalColsMedium ? "slds-medium-size_".concat(colsMedium, "-of-").concat(adjustCols(totalColsMedium)) : null, colsLarge && totalColsLarge ? "slds-large-size_".concat(colsLarge, "-of-").concat(adjustCols(totalColsLarge, true)) : null);
  return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
    className: rowClassNames
  }, pprops), children);
};

exports.Col = Col;

var Row = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Row, _Component);

  var _super = _createSuper(Row);

  function Row() {
    (0, _classCallCheck2["default"])(this, Row);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(Row, [{
    key: "renderColumn",
    value: function renderColumn(colProps, child) {
      if (child.type !== Col) {
        return /*#__PURE__*/_react["default"].createElement(Col, colProps, child);
      }
      /* eslint-disable no-param-reassign */


      var childProps = Object.keys(colProps).reduce(function (cprops, key) {
        cprops[key] = child.props[key] || colProps[key];
        return cprops;
      }, {});
      return /*#__PURE__*/_react["default"].cloneElement(child, childProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          align = _this$props.align,
          nowrap = _this$props.nowrap,
          nowrapSmall = _this$props.nowrapSmall,
          nowrapMedium = _this$props.nowrapMedium,
          nowrapLarge = _this$props.nowrapLarge,
          cols = _this$props.cols,
          colsSmall = _this$props.colsSmall,
          colsMedium = _this$props.colsMedium,
          colsLarge = _this$props.colsLarge,
          pullPadded = _this$props.pullPadded,
          children = _this$props.children,
          props = (0, _objectWithoutProperties2["default"])(_this$props, ["className", "align", "nowrap", "nowrapSmall", "nowrapMedium", "nowrapLarge", "cols", "colsSmall", "colsMedium", "colsLarge", "pullPadded", "children"]);
      var rowClassNames = (0, _classnames["default"])(className, 'slds-grid', align ? "slds-grid_align-".concat(align) : null, nowrap ? 'slds-nowrap' : 'slds-wrap', nowrapSmall ? 'slds-nowrap_small' : null, nowrapMedium ? 'slds-nowrap_medium' : null, nowrapLarge ? 'slds-nowrap_large' : null, pullPadded ? 'slds-grid_pull-padded' : null);

      var totalCols = cols || function () {
        var cnt = 0;

        _react["default"].Children.forEach(children, function (child) {
          if (! /*#__PURE__*/_react["default"].isValidElement(child)) return;
          cnt += child.props.cols || 1;
        });

        return cnt;
      }();

      var colProps = {
        totalCols: totalCols,
        totalColsSmall: colsSmall || totalCols,
        totalColsMedium: colsMedium || totalCols,
        totalColsLarge: colsLarge || totalCols
      };
      return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
        className: rowClassNames
      }, props), _react["default"].Children.map(children, this.renderColumn.bind(this, colProps)));
    }
  }]);
  return Row;
}(_react.Component);

exports.Row = Row;
//# sourceMappingURL=Grid.js.map