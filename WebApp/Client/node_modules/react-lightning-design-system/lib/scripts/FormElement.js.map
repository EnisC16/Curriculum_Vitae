{"version":3,"sources":["../../src/scripts/FormElement.tsx"],"names":["FormElement","props","className","error","totalCols","cols","formElementRef","children","formElementClassNames","id","label","required","undefined","dropdown","readOnly","formElementControlClassNames","renderError","errorMessage","message","style","labelElem","renderLabel","controlElem","renderControl","formElemChildren","renderFormElement","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\n\nexport type FormElementProps = {\n  id?: string;\n  className?: string;\n  label?: string;\n  required?: boolean;\n  error?: boolean | string | { message: string };\n  readOnly?: boolean;\n  cols?: number;\n  totalCols?: number;\n  dropdown?: JSX.Element;\n  formElementRef?: (node: HTMLDivElement) => void;\n  style?: object;\n};\n\nexport class FormElement extends React.Component<FormElementProps, {}> {\n  static isFormElement = true;\n\n  renderFormElement(props: any) {\n    const {\n      className,\n      error,\n      totalCols,\n      cols = 1,\n      formElementRef,\n      children,\n    } = props;\n    const formElementClassNames = classnames(\n      'slds-form-element',\n      {\n        'slds-has-error': error,\n        [`slds-size_${cols}-of-${totalCols}`]: typeof totalCols === 'number',\n      },\n      className\n    );\n    return (\n      <div\n        ref={formElementRef}\n        key='form-element'\n        className={formElementClassNames}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  renderLabel() {\n    const { id, label, required } = this.props;\n    return label ? (\n      <label\n        key='form-element-label'\n        className='slds-form-element__label'\n        htmlFor={id}\n      >\n        {label}\n        {required ? <abbr className='slds-required'>*</abbr> : undefined}\n      </label>\n    ) : (\n      undefined\n    );\n  }\n\n  renderControl(props: { children: any; dropdown: any; error: any }) {\n    const { children, dropdown, error } = props;\n    const { readOnly } = this.props;\n    const formElementControlClassNames = classnames(\n      'slds-form-element__control',\n      { 'slds-has-divider_bottom': readOnly }\n    );\n    return (\n      <div key='form-element-control' className={formElementControlClassNames}>\n        {children}\n        {dropdown}\n        {this.renderError(error)}\n      </div>\n    );\n  }\n\n  renderError(error: any) {\n    const errorMessage = error\n      ? typeof error === 'string'\n        ? error\n        : typeof error === 'object'\n        ? error.message\n        : undefined\n      : undefined;\n    return errorMessage ? (\n      <span key='slds-form-error' className='slds-form-element__help'>\n        {errorMessage}\n      </span>\n    ) : (\n      undefined\n    );\n  }\n\n  render() {\n    const {\n      dropdown,\n      className,\n      totalCols,\n      cols,\n      error,\n      children,\n      style,\n      ...props\n    } = this.props;\n    const labelElem = this.renderLabel();\n    const controlElem = this.renderControl({ children, dropdown, error });\n    const formElemChildren = [labelElem, controlElem];\n    return this.renderFormElement({\n      ...props,\n      className,\n      error,\n      totalCols,\n      cols,\n      style,\n      children: formElemChildren,\n    });\n  }\n}\n"],"file":"FormElement.js"}