"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonIcon = exports.Button = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _Icon = require("./Icon");

var _Spinner = require("./Spinner");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ICON_SIZES = ['x-small', 'small', 'medium', 'large'];
var ICON_ALIGNS = ['left', 'right'];

var Button = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Button, _Component);

  var _super = _createSuper(Button);

  function Button(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Button);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "node", null);
    _this.onClick = _this.onClick.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(Button, [{
    key: "onClick",
    value: function onClick(e) {
      if (this.node !== null) {
        // Safari, FF to trigger focus event on click
        this.node.focus();
      }

      var onClick = this.props.onClick;
      if (onClick) onClick(e);
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(iconSize, inv) {
      var _this$props = this.props,
          icon = _this$props.icon,
          iconAlign = _this$props.iconAlign,
          type = _this$props.type;
      var inverse = inv || /-?inverse$/.test(type || '');
      return /*#__PURE__*/_react["default"].createElement(ButtonIcon, {
        icon: icon,
        align: iconAlign,
        size: iconSize,
        inverse: inverse
      });
    }
  }, {
    key: "renderIconMore",
    value: function renderIconMore() {
      var _this$props2 = this.props,
          iconMore = _this$props2.iconMore,
          icon = _this$props2.icon,
          iconAlign = _this$props2.iconAlign,
          label = _this$props2.label,
          children = _this$props2.children;
      var adjoining = icon && (iconAlign === 'right' || !(label || children));
      var iconMoreSize = this.props.iconMoreSize || adjoining ? 'x-small' : 'small';
      return /*#__PURE__*/_react["default"].createElement(ButtonIcon, {
        icon: iconMore,
        align: "right",
        size: iconMoreSize
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          className = _this$props3.className,
          type = _this$props3.type,
          size = _this$props3.size,
          icon = _this$props3.icon,
          iconAlign = _this$props3.iconAlign,
          iconMore = _this$props3.iconMore,
          selected = _this$props3.selected,
          alt = _this$props3.alt,
          label = _this$props3.label,
          loading = _this$props3.loading,
          iconSize = _this$props3.iconSize,
          inverse = _this$props3.inverse,
          _this$props3$htmlType = _this$props3.htmlType,
          htmlType = _this$props3$htmlType === void 0 ? 'button' : _this$props3$htmlType,
          children = _this$props3.children,
          buttonRef = _this$props3.buttonRef,
          props = (0, _objectWithoutProperties2["default"])(_this$props3, ["className", "type", "size", "icon", "iconAlign", "iconMore", "selected", "alt", "label", "loading", "iconSize", "inverse", "htmlType", "children", "buttonRef"]);
      var typeClassName = type ? "slds-button_".concat(type) : null;
      var btnClassNames = (0, _classnames2["default"])(className, 'slds-button', typeClassName, (0, _defineProperty2["default"])({
        'slds-is-selected': selected
      }, "slds-button_icon-".concat(size), /^(x-small|small)$/.test(size || '') && /^icon-/.test(type || '')));
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react/button-has-type
        _react["default"].createElement("button", (0, _extends2["default"])({
          ref: function ref(node) {
            _this2.node = node;
            if (buttonRef) buttonRef(node);
          },
          className: btnClassNames,
          type: htmlType
        }, props, {
          onClick: this.onClick
        }), icon && iconAlign !== 'right' ? this.renderIcon(iconSize, inverse) : null, children || label, icon && iconAlign === 'right' ? this.renderIcon(iconSize, inverse) : null, iconMore ? this.renderIconMore() : null, alt ? /*#__PURE__*/_react["default"].createElement("span", {
          className: "slds-assistive-text"
        }, alt) : null, loading ? /*#__PURE__*/_react["default"].createElement(_Spinner.Spinner, null) : null)
      );
    }
  }]);
  return Button;
}(_react.Component);

exports.Button = Button;

var ButtonIcon = function ButtonIcon(_ref) {
  var icon = _ref.icon,
      align = _ref.align,
      size = _ref.size,
      inverse = _ref.inverse,
      className = _ref.className,
      style = _ref.style,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["icon", "align", "size", "inverse", "className", "style"]);
  var alignClassName = align && ICON_ALIGNS.indexOf(align) >= 0 ? "slds-button__icon_".concat(align) : null;
  var sizeClassName = size && ICON_SIZES.indexOf(size) >= 0 ? "slds-button__icon_".concat(size) : null;
  var inverseClassName = inverse ? 'slds-button__icon_inverse' : null;
  var iconClassNames = (0, _classnames2["default"])('slds-button__icon', alignClassName, sizeClassName, inverseClassName, className);
  return /*#__PURE__*/_react["default"].createElement(_Icon.Icon, (0, _extends2["default"])({
    className: iconClassNames,
    icon: icon,
    textColor: null,
    pointerEvents: "none",
    style: style
  }, props));
};

exports.ButtonIcon = ButtonIcon;
//# sourceMappingURL=Button.js.map