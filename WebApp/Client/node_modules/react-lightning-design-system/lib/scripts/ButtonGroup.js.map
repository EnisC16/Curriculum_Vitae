{"version":3,"sources":["../../src/scripts/ButtonGroup.tsx"],"names":["ButtonGroup","props","renderButton","bind","button","index","cnt","React","Children","count","children","type","DropdownButton","isGroupable","cloneElement","key","grouped","isFirstInGroup","isLastInGroup","className","btnGrpClassNames","map","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;IAIaA,W;;;;;AACX,uBAAYC,KAAZ,EAA+C;AAAA;;AAAA;AAC7C,8BAAMA,KAAN;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,gDAApB;AAF6C;AAG9C;;;;iCAEYC,M,EAAaC,K,EAAe;AACvC,UAAMC,GAAG,GAAGC,kBAAMC,QAAN,CAAeC,KAAf,CAAqB,KAAKR,KAAL,CAAWS,QAAhC,CAAZ;;AACA,UACEN,MAAM,CAACO,IAAP,KACCP,MAAM,CAACO,IAAP,KAAgBC,8BAAhB,IAAkCR,MAAM,CAACO,IAAP,CAAYE,WAD/C,CADF,EAGE;AACA,4BAAON,kBAAMO,YAAN,CAAmBV,MAAnB,EAA2B;AAChCW,UAAAA,GAAG,EAAEV,KAD2B;AAEhCW,UAAAA,OAAO,EAAE,IAFuB;AAGhCC,UAAAA,cAAc,EAAEZ,KAAK,KAAK,CAHM;AAIhCa,UAAAA,aAAa,EAAEb,KAAK,KAAKC,GAAG,GAAG;AAJC,SAA3B,CAAP;AAMD;;AAED,aAAOF,MAAP;AACD;;;6BAEQ;AAAA,wBACmC,KAAKH,KADxC;AAAA,UACCkB,SADD,eACCA,SADD;AAAA,UACYT,QADZ,eACYA,QADZ;AAAA,UACyBT,KADzB;AAEP,UAAMmB,gBAAgB,GAAG,4BAAWD,SAAX,EAAsB,mBAAtB,CAAzB;AACA,0BACE;AAAK,QAAA,SAAS,EAAEC,gBAAhB;AAAkC,QAAA,IAAI,EAAC;AAAvC,SAAmDnB,KAAnD,GACGO,gBAASa,GAAT,CAAaX,QAAb,EAAuB,KAAKR,YAA5B,CADH,CADF;AAKD;;;EA/B8BoB,gB","sourcesContent":["import React, { Component, Children, HTMLAttributes } from 'react';\nimport classnames from 'classnames';\nimport { DropdownButton } from './DropdownButton';\n\nexport type ButtonGroupProps = {} & HTMLAttributes<HTMLDivElement>;\n\nexport class ButtonGroup extends Component<ButtonGroupProps, {}> {\n  constructor(props: Readonly<ButtonGroupProps>) {\n    super(props);\n    this.renderButton = this.renderButton.bind(this);\n  }\n\n  renderButton(button: any, index: number) {\n    const cnt = React.Children.count(this.props.children);\n    if (\n      button.type &&\n      (button.type === DropdownButton || button.type.isGroupable)\n    ) {\n      return React.cloneElement(button, {\n        key: index,\n        grouped: true,\n        isFirstInGroup: index === 0,\n        isLastInGroup: index === cnt - 1,\n      });\n    }\n\n    return button;\n  }\n\n  render() {\n    const { className, children, ...props } = this.props;\n    const btnGrpClassNames = classnames(className, 'slds-button-group');\n    return (\n      <div className={btnGrpClassNames} role='group' {...props}>\n        {Children.map(children, this.renderButton)}\n      </div>\n    );\n  }\n}\n"],"file":"ButtonGroup.js"}