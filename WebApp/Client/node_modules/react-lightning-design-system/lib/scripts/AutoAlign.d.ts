import React, { ComponentType } from 'react';
import PropTypes from 'prop-types';
import { ComponentSettingsContext } from './ComponentSettings';
declare type Offset = {
    top: number;
    left: number;
};
declare type Rect = Offset & {
    width: number;
    height: number;
};
declare type VertAlign = 'top' | 'bottom' | 'top-absolute' | 'bottom-absolute';
declare type HorizAlign = 'left' | 'right' | 'left-absolute' | 'right-absolute';
declare type Align = VertAlign | HorizAlign;
export declare type RectangleAlignment = Readonly<[Align] | [Align, Align]>;
export declare type AutoAlignOptions = {
    triggerSelector: string;
    alignmentStyle: 'menu' | 'popover';
};
export declare type AutoAlignProps = {
    portalClassName?: string;
    portalStyle?: object;
    size?: 'small' | 'medium' | 'large';
    preventPortalize?: boolean;
    align?: Align;
} & Partial<InjectedProps>;
export declare type InjectedProps = {
    alignment: RectangleAlignment;
};
export declare type AutoAlignState = {
    alignment: RectangleAlignment;
    rootNodeRect?: Rect;
    triggerNodeRect?: Rect;
};
/**
 *
 */
export declare function autoAlign(options: AutoAlignOptions): <TOriginalProps extends {}>(Cmp: React.ComponentType<TOriginalProps & InjectedProps>) => {
    new (props: TOriginalProps & {
        portalClassName?: string | undefined;
        portalStyle?: object | undefined;
        size?: "small" | "medium" | "large" | undefined;
        preventPortalize?: boolean | undefined;
        align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
    } & Partial<InjectedProps>): {
        pid: number | null;
        node: HTMLElement | null;
        content: any;
        context: Pick<ComponentSettingsContext, 'portalClassName' | 'portalStyle'>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        requestRecalcAlignment: (...args: any) => void;
        recalcAlignment: () => void;
        updateAlignment: (triggerNodeRect?: Rect) => void;
        render(): JSX.Element;
        setState<K extends "alignment" | "rootNodeRect" | "triggerNodeRect">(state: AutoAlignState | ((prevState: Readonly<AutoAlignState>, props: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>>) => AutoAlignState | Pick<AutoAlignState, K> | null) | Pick<AutoAlignState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<AutoAlignState>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>>, nextState: Readonly<AutoAlignState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>>, prevState: Readonly<AutoAlignState>): any;
        componentDidUpdate?(prevProps: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>>, prevState: Readonly<AutoAlignState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>>, nextState: Readonly<AutoAlignState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<TOriginalProps & {
            portalClassName?: string | undefined;
            portalStyle?: object | undefined;
            size?: "small" | "medium" | "large" | undefined;
            preventPortalize?: boolean | undefined;
            align?: "left" | "right" | "bottom" | "top" | "top-absolute" | "bottom-absolute" | "left-absolute" | "right-absolute" | undefined;
        } & Partial<InjectedProps>>, nextState: Readonly<AutoAlignState>, nextContext: any): void;
    };
    contextTypes: {
        portalClassName: PropTypes.Requireable<string>;
        portalStyle: PropTypes.Requireable<object>;
    };
    contextType?: React.Context<any> | undefined;
};
export {};
