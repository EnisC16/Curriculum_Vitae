import React, { Component, HTMLAttributes, ReactNode } from 'react';
import { DropdownButtonProps } from './DropdownButton';
export declare type TabContentProps = {
    active?: boolean;
} & HTMLAttributes<HTMLDivElement>;
export declare type TabMenuProps<MenuEventKey extends Key> = DropdownButtonProps<MenuEventKey>;
declare type Key = string | number;
export declare type TabType = 'default' | 'scoped';
export declare type TabItemRendererProps<EventKey extends Key = Key, EventValueKey extends EventKey = EventKey> = {
    type?: TabType;
    title?: string;
    menu?: JSX.Element;
    menuItems?: JSX.Element[];
    menuIcon?: string;
    eventKey?: EventValueKey;
    activeKey?: EventValueKey;
    activeTabRef?: (node: HTMLAnchorElement) => void;
    onTabClick?: (eventKey: EventKey) => void;
    onTabKeyDown?: (eventKey: EventKey, e: React.KeyboardEvent<HTMLAnchorElement>) => void;
    children?: React.ReactNode;
    [key: string]: any;
};
export declare type TabItemProps<EventKey extends Key, EventValueKey extends EventKey> = {
    tabItemRenderer?: (props: TabItemRendererProps<EventKey, EventValueKey>) => JSX.Element;
} & TabItemRendererProps<EventKey, EventValueKey>;
export declare type TabNavProps<EventKey extends Key, EventValueKey extends EventKey> = {
    type?: TabType;
    activeKey?: EventValueKey;
    tabs?: ReactNode;
    activeTabRef?: (node: HTMLAnchorElement) => void;
    onTabClick?: (eventKey: EventKey) => void;
    onTabKeyDown?: (eventKey: EventKey, e: React.KeyboardEvent<HTMLAnchorElement>) => void;
};
export declare type TabProps<EventKey extends Key, EventValueKey extends EventKey> = {
    className?: string;
    eventKey?: EventValueKey;
    activeKey?: EventValueKey;
} & TabItemProps<EventKey, EventValueKey>;
/**
 *
 */
export declare const Tab: <EventKey extends string | number, EventValueKey extends EventKey>(props: TabProps<EventKey, EventValueKey>) => JSX.Element;
export declare type TabsProps<EventKey extends Key, EventValueKey extends EventKey> = {
    className?: string;
    type?: TabType;
    defaultActiveKey?: EventValueKey;
    activeKey?: EventValueKey;
    onSelect?: (tabKey: EventKey) => void;
};
export declare type TabsState<EventKey extends Key> = {
    focusTab?: boolean;
    activeKey?: EventKey;
};
/**
 *
 */
export declare class Tabs<EventKey extends Key, EventValueKey extends EventKey> extends Component<TabsProps<EventKey, EventValueKey>, TabsState<EventKey>> {
    activeTab: HTMLAnchorElement | null;
    constructor(props: Readonly<TabsProps<EventKey, EventValueKey>>);
    componentDidUpdate(): void;
    onTabClick: (tabKey: EventKey) => void;
    onTabKeyDown: (tabKey: EventKey, e: React.KeyboardEvent<HTMLAnchorElement>) => void;
    render(): JSX.Element;
}
export {};
