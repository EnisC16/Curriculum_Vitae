"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PicklistItem = exports.Picklist = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _FormElement = require("./FormElement");

var _Icon = require("./Icon");

var _Button = require("./Button");

var _DropdownMenu = require("./DropdownMenu");

var _util = require("./util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Picklist = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Picklist, _Component);

  var _super = _createSuper(Picklist);

  function Picklist(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Picklist);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "node", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "picklistButton", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "dropdown", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onClick", function () {
      _this.setState(function (prevState) {
        return {
          opened: !prevState.opened
        };
      });

      setTimeout(function () {
        _this.focusToTargetItemEl();
      }, 10);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onPicklistItemSelect", function (val) {
      var value = val;
      var _this$props$multiSele = _this.props.multiSelect,
          multiSelect = _this$props$multiSele === void 0 ? false : _this$props$multiSele;

      _this.updateItemValue(value);

      if (_this.props.onSelect) {
        _this.props.onSelect(value);
      }

      if (!multiSelect) {
        // close if only single select
        setTimeout(function () {
          _this.setState({
            opened: false
          });

          if (_this.props.onComplete) {
            _this.props.onComplete();
          }

          var picklistButtonEl = _this.picklistButton;

          if (picklistButtonEl) {
            picklistButtonEl.focus();
          }
        }, 200);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onPicklistClose", function () {
      var picklistButtonEl = _this.picklistButton;

      if (picklistButtonEl) {
        picklistButtonEl.focus();
      }

      _this.setState({
        opened: false
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onBlur", function () {
      setTimeout(function () {
        if (!_this.isFocusedInComponent()) {
          _this.setState({
            opened: false
          });

          if (_this.props.onBlur) {
            _this.props.onBlur();
          }

          if (_this.props.onComplete) {
            _this.props.onComplete();
          }
        }
      }, 10);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onKeydown", function (e) {
      if (e.keyCode === 40) {
        // down
        e.preventDefault();
        e.stopPropagation();

        if (!_this.state.opened) {
          _this.setState({
            opened: true
          });

          setTimeout(function () {
            _this.focusToTargetItemEl();
          }, 10);
        } else {
          _this.focusToTargetItemEl();
        }
      } else if (e.keyCode === 27) {
        // ESC
        e.preventDefault();
        e.stopPropagation();

        _this.setState({
          opened: false
        });

        if (_this.props.onComplete) {
          _this.props.onComplete();
        }
      }

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderPicklistItem", function (item) {
      var selected = _this.getValues().indexOf(item.props.value) !== -1;

      var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this),
          onBlur = _assertThisInitialize.onBlur;

      return /*#__PURE__*/_react["default"].cloneElement(item, {
        selected: selected,
        onBlur: onBlur
      });
    });
    var _value = props.value,
        defaultValue = props.defaultValue,
        opened = props.opened,
        defaultOpened = props.defaultOpened;
    var initialValue = typeof _value !== 'undefined' ? _value : defaultValue;
    _this.state = {
      id: "form-element-".concat((0, _util.uuid)()),
      opened: typeof opened !== 'undefined' ? opened : defaultOpened,
      values: initialValue == null ? [] : Array.isArray(initialValue) ? initialValue : [initialValue]
    };
    return _this;
  }

  (0, _createClass2["default"])(Picklist, [{
    key: "getValues",
    value: function getValues() {
      var value = this.props.value; // for controlled behavior, returning value from props

      if (typeof value !== 'undefined') {
        return value === null ? [] : Array.isArray(value) ? value : [value];
      } // for uncontrolled - value from state


      return this.state.values;
    }
  }, {
    key: "setValues",
    value: function setValues(newValues) {
      var _this$props = this.props,
          _this$props$multiSele2 = _this$props.multiSelect,
          multiSelect = _this$props$multiSele2 === void 0 ? false : _this$props$multiSele2,
          onValueChange = _this$props.onValueChange;
      var prevValues = this.getValues();
      this.setState({
        values: newValues
      }); // this is for controlled behavior

      if (onValueChange && prevValues !== newValues) {
        if (multiSelect) {
          onValueChange(newValues, prevValues);
        } else {
          onValueChange(newValues.length > 0 ? newValues[0] : null, prevValues.length > 0 ? prevValues[0] : null);
        }
      }
    }
  }, {
    key: "getSelectedItemLabel",
    value: function getSelectedItemLabel() {
      var selectedValues = this.getValues(); // many items selected

      if (selectedValues.length > 1) {
        var _this$props$optionsSe = this.props.optionsSelectedText,
            optionsSelectedText = _this$props$optionsSe === void 0 ? '' : _this$props$optionsSe;
        return optionsSelectedText;
      } // one item


      if (selectedValues.length === 1) {
        var selectedValue = selectedValues[0];
        var selected = null;

        _react["default"].Children.forEach(this.props.children, function (item) {
          if (item.props.value === selectedValue) {
            selected = item.props.label || item.props.children;
          }
        });

        return selected || selectedValue;
      } // zero items


      var _this$props$selectedT = this.props.selectedText,
          selectedText = _this$props$selectedT === void 0 ? '' : _this$props$selectedT;
      return selectedText;
    }
  }, {
    key: "updateItemValue",
    value: function updateItemValue(itemValue) {
      var _this$props$multiSele3 = this.props.multiSelect,
          multiSelect = _this$props$multiSele3 === void 0 ? false : _this$props$multiSele3;

      if (multiSelect) {
        var newValues = this.getValues().slice(); // toggle value

        if (newValues.indexOf(itemValue) === -1) {
          // add value to array
          newValues.push(itemValue);
        } else {
          // remove from array
          newValues.splice(newValues.indexOf(itemValue), 1);
        }

        this.setValues(newValues);
      } else {
        // set only one value
        this.setValues([itemValue]);
      }
    }
  }, {
    key: "isFocusedInComponent",
    value: function isFocusedInComponent() {
      var targetEl = document.activeElement;
      return (0, _util.isElInChildren)(this.node, targetEl) || (0, _util.isElInChildren)(this.dropdown, targetEl);
    }
  }, {
    key: "focusToTargetItemEl",
    value: function focusToTargetItemEl() {
      var dropdownEl = this.dropdown;

      if (!dropdownEl) {
        return;
      }

      var firstItemEl = dropdownEl.querySelector('.slds-is-selected > .react-slds-menuitem[tabIndex]') || dropdownEl.querySelector('.react-slds-menuitem[tabIndex]');

      if (firstItemEl) {
        firstItemEl.focus();
      }
    }
  }, {
    key: "renderPicklist",
    value: function renderPicklist(props) {
      var _this2 = this;

      /* eslint-disable @typescript-eslint/no-unused-vars */
      var className = props.className,
          id = props.id,
          disabled = props.disabled,
          menuSize = props.menuSize,
          menuStyle = props.menuStyle,
          value = props.value,
          defaultValue = props.defaultValue,
          opened = props.opened,
          defaultOpened = props.defaultOpened,
          selectedText = props.selectedText,
          multiSelect = props.multiSelect,
          optionsSelectedText = props.optionsSelectedText,
          onSelect = props.onSelect,
          onValueChange = props.onValueChange,
          onClick = props.onClick,
          onBlur = props.onBlur,
          onKeyDown = props.onKeyDown,
          onComplete = props.onComplete,
          rprops = (0, _objectWithoutProperties2["default"])(props, ["className", "id", "disabled", "menuSize", "menuStyle", "value", "defaultValue", "opened", "defaultOpened", "selectedText", "multiSelect", "optionsSelectedText", "onSelect", "onValueChange", "onClick", "onBlur", "onKeyDown", "onComplete"]);
      /* eslint-enable @typescript-eslint/no-unused-vars */

      var picklistClassNames = (0, _classnames["default"])(className, 'slds-picklist', 'slds-dropdown-trigger');
      var isOpened = typeof opened !== 'undefined' ? opened : this.state.opened;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: picklistClassNames,
        "aria-expanded": isOpened
      }, /*#__PURE__*/_react["default"].createElement(_Button.Button, (0, _extends2["default"])({
        id: id,
        buttonRef: function buttonRef(node) {
          return _this2.picklistButton = node;
        }
      }, rprops, {
        className: "slds-picklist__label",
        style: {
          justifyContent: 'normal'
        },
        type: "neutral",
        disabled: disabled,
        onClick: disabled ? undefined : this.onClick,
        onBlur: disabled ? undefined : this.onBlur,
        onKeyDown: disabled ? undefined : this.onKeydown
      }), /*#__PURE__*/_react["default"].createElement("span", {
        className: "slds-truncate"
      }, this.getSelectedItemLabel() || /*#__PURE__*/_react["default"].createElement("span", null, "\xA0")), /*#__PURE__*/_react["default"].createElement(_Icon.Icon, {
        icon: "down"
      })), this.renderDropdown(menuSize, menuStyle));
    }
  }, {
    key: "renderDropdown",
    value: function renderDropdown(menuSize, menuStyle) {
      var _this3 = this;

      var _this$props2 = this.props,
          className = _this$props2.className,
          opened = _this$props2.opened,
          children = _this$props2.children;
      var isOpened = typeof opened !== 'undefined' ? opened : this.state.opened;
      return isOpened ? /*#__PURE__*/_react["default"].createElement(_DropdownMenu.DropdownMenu, {
        portalClassName: (0, _classnames["default"])(className, 'slds-picklist'),
        dropdownMenuRef: function dropdownMenuRef(node) {
          return _this3.dropdown = node;
        },
        size: menuSize,
        style: menuStyle,
        onMenuSelect: this.onPicklistItemSelect,
        onMenuClose: this.onPicklistClose,
        onBlur: this.onBlur
      }, _react["default"].Children.map(children, this.renderPicklistItem)) : /*#__PURE__*/_react["default"].createElement("div", {
        ref: function ref(node) {
          return _this3.dropdown = node;
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var id = this.props.id || this.state.id;
      var _this$props3 = this.props,
          label = _this$props3.label,
          required = _this$props3.required,
          error = _this$props3.error,
          totalCols = _this$props3.totalCols,
          cols = _this$props3.cols,
          props = (0, _objectWithoutProperties2["default"])(_this$props3, ["label", "required", "error", "totalCols", "cols"]);
      var formElemProps = {
        id: id,
        label: label,
        required: required,
        error: error,
        totalCols: totalCols,
        cols: cols
      };
      return /*#__PURE__*/_react["default"].createElement(_FormElement.FormElement, (0, _extends2["default"])({
        formElementRef: function formElementRef(node) {
          return _this4.node = node;
        }
      }, formElemProps), this.renderPicklist(_objectSpread(_objectSpread({}, props), {}, {
        id: id
      })));
    }
  }]);
  return Picklist;
}(_react.Component);

exports.Picklist = Picklist;
(0, _defineProperty2["default"])(Picklist, "isFormElement", true);

var PicklistItem = function PicklistItem(_ref) {
  var label = _ref.label,
      selected = _ref.selected,
      value = _ref.value,
      children = _ref.children,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["label", "selected", "value", "children"]);
  return /*#__PURE__*/_react["default"].createElement(_DropdownMenu.DropdownMenuItem, (0, _extends2["default"])({
    icon: selected ? 'check' : 'none',
    role: "menuitemradio",
    selected: selected,
    eventKey: value
  }, props), label || children);
};

exports.PicklistItem = PicklistItem;
//# sourceMappingURL=Picklist.js.map