"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldSet = FieldSet;
exports.FieldSetRow = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _FormElement = require("./FormElement");

var _util = require("./util");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function FieldSet(_ref) {
  var className = _ref.className,
      label = _ref.label,
      children = _ref.children,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["className", "label", "children"]);
  var fsClassNames = (0, _classnames["default"])(className, 'slds-form_compound');
  return /*#__PURE__*/_react["default"].createElement("fieldset", (0, _extends2["default"])({
    className: fsClassNames
  }, props), label ? /*#__PURE__*/_react["default"].createElement("legend", {
    className: "slds-form-element__label"
  }, label) : null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "form-element__group"
  }, children));
}

FieldSet.isFormElement = true;

var FieldSetRow = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(FieldSetRow, _Component);

  var _super = _createSuper(FieldSetRow);

  function FieldSetRow() {
    (0, _classCallCheck2["default"])(this, FieldSetRow);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(FieldSetRow, [{
    key: "renderChild",
    value: function renderChild(totalCols, child) {
      if (child && !child.type.isFormElement) {
        var _child$props$id = child.props.id,
            id = _child$props$id === void 0 ? "form-element-".concat((0, _util.uuid)()) : _child$props$id;
        var formElemProps = {
          id: id,
          totalCols: totalCols,
          cols: 1
        };
        return /*#__PURE__*/_react["default"].createElement(_FormElement.FormElement, formElemProps, /*#__PURE__*/_react["default"].cloneElement(child, {
          id: id
        }));
      }

      return /*#__PURE__*/_react["default"].cloneElement(child, {
        totalCols: totalCols
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          cols = _this$props.cols,
          children = _this$props.children;

      var totalCols = cols || _react["default"].Children.count(children);

      var rowClassNames = (0, _classnames["default"])(className, 'slds-form-element__row');
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: rowClassNames
      }, _react["default"].Children.map(children, this.renderChild.bind(this, totalCols)));
    }
  }]);
  return FieldSetRow;
}(_react.Component); // FieldSet.Row = FieldSetRow;


exports.FieldSetRow = FieldSetRow;
(0, _defineProperty2["default"])(FieldSetRow, "isFormElement", true);
//# sourceMappingURL=FieldSet.js.map