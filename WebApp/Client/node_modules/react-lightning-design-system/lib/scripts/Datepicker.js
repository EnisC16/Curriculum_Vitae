"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Datepicker = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _moment = _interopRequireDefault(require("moment"));

var _Button = require("./Button");

var _Select = require("./Select");

var _util = require("./util");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function createCalendarObject(date, mnDate, mxDate) {
  var minDate;
  var maxDate;
  var d = (0, _moment["default"])(date, 'YYYY-MM-DD');

  if (!d.isValid()) {
    d = (0, _moment["default"])((0, _util.getToday)(), 'YYYY-MM-DD');
  }

  if (mnDate) {
    var minD = (0, _moment["default"])(mnDate, 'YYYY-MM-DD');

    if (minD.isValid()) {
      minDate = {
        year: minD.year(),
        month: minD.month(),
        date: minD.date(),
        value: minD.format('YYYY-MM-DD')
      };
    }
  }

  if (mxDate) {
    var maxD = (0, _moment["default"])(mxDate, 'YYYY-MM-DD');

    if (maxD.isValid()) {
      maxDate = {
        year: maxD.year(),
        month: maxD.month(),
        date: maxD.date(),
        value: maxD.format('YYYY-MM-DD')
      };
    }
  }

  var year = d.year();
  var month = d.month();
  var first = (0, _moment["default"])(d).startOf('month').startOf('week');
  var last = (0, _moment["default"])(d).endOf('month').endOf('week');
  var weeks = [];
  var days = [];

  for (var dd = first; dd.isBefore(last); dd = dd.add(1, 'd')) {
    days.push({
      year: dd.year(),
      month: dd.month(),
      date: dd.date(),
      value: dd.format('YYYY-MM-DD')
    });

    if (days.length === 7) {
      weeks.push(days);
      days = [];
    }
  }

  var cal = {
    year: year,
    month: month,
    weeks: weeks
  };

  if (minDate) {
    cal.minDate = minDate;
  }

  if (maxDate) {
    cal.maxDate = maxDate;
  }

  return cal;
}

function cancelEvent(e) {
  e.preventDefault();
  e.stopPropagation();
}

var Datepicker = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Datepicker, _Component);

  var _super = _createSuper(Datepicker);

  function Datepicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Datepicker);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "node", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "month", null);
    _this.state = {};
    _this.onBlur = _this.onBlur.bind((0, _assertThisInitialized2["default"])(_this));
    _this.onKeyDown = _this.onKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(Datepicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.autoFocus) {
        var targetDate = this.props.selectedDate || (0, _util.getToday)();
        setTimeout(function () {
          _this2.focusDate(targetDate);
        }, 10);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.state.focusDate && (this.state.targetDate || this.props.selectedDate)) {
        this.focusDate(this.state.targetDate || this.props.selectedDate);
        /* eslint-disable react/no-did-update-set-state */

        this.setState({
          focusDate: false
        });
      }
    }
  }, {
    key: "onDateKeyDown",
    value: function onDateKeyDown(date, e) {
      var targetDate = this.state.targetDate || this.props.selectedDate;

      if (e.keyCode === 13 || e.keyCode === 32) {
        // return / space
        this.onDateClick(date);
        e.preventDefault();
        e.stopPropagation();
      } else if (e.keyCode >= 37 && e.keyCode <= 40) {
        // cursor key
        if (e.keyCode === 37) {
          targetDate = (0, _moment["default"])(targetDate).add(-1, e.shiftKey ? 'months' : 'days');
        } else if (e.keyCode === 39) {
          // right arrow key
          targetDate = (0, _moment["default"])(targetDate).add(1, e.shiftKey ? 'months' : 'days');
        } else if (e.keyCode === 38) {
          // up arrow key
          targetDate = (0, _moment["default"])(targetDate).add(-1, e.shiftKey ? 'years' : 'weeks');
        } else if (e.keyCode === 40) {
          // down arrow key
          targetDate = (0, _moment["default"])(targetDate).add(1, e.shiftKey ? 'years' : 'weeks');
        }

        targetDate = targetDate.format('YYYY-MM-DD');
        this.setState({
          targetDate: targetDate,
          focusDate: true
        });
        e.preventDefault();
        e.stopPropagation();
      }
    }
  }, {
    key: "onDateClick",
    value: function onDateClick(date) {
      if (this.props.onSelect) {
        this.props.onSelect(date);
      }
    }
  }, {
    key: "onDateFocus",
    value: function onDateFocus(date) {
      var _this3 = this;

      if (this.state.targetDate !== date) {
        setTimeout(function () {
          _this3.setState({
            targetDate: date
          });
        }, 10);
      }
    }
  }, {
    key: "onYearChange",
    value: function onYearChange(e) {
      // eslint-disable-next-line react/no-access-state-in-setstate
      var targetDate = this.state.targetDate || this.props.selectedDate;
      targetDate = (0, _moment["default"])(targetDate).year(Number(e.target.value)).format('YYYY-MM-DD');
      this.setState({
        targetDate: targetDate
      });
    }
  }, {
    key: "onMonthChange",
    value: function onMonthChange(month) {
      // eslint-disable-next-line react/no-access-state-in-setstate
      var targetDate = this.state.targetDate || this.props.selectedDate;
      targetDate = (0, _moment["default"])(targetDate).add(month, 'months').format('YYYY-MM-DD');
      this.setState({
        targetDate: targetDate
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur(e) {
      var _this4 = this;

      setTimeout(function () {
        if (!_this4.isFocusedInComponent()) {
          if (_this4.props.onBlur) {
            _this4.props.onBlur(e);
          }
        }
      }, 10);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      if (e.keyCode === 27) {
        // ESC
        if (this.props.onClose) {
          this.props.onClose();
        }
      }
    }
  }, {
    key: "focusDate",
    value: function focusDate(date) {
      var el = this.month;

      if (!el) {
        return;
      }

      var dateEl = el.querySelector(".slds-day[data-date-value=\"".concat(date, "\"]"));

      if (dateEl) {
        dateEl.focus();
      }
    }
  }, {
    key: "isFocusedInComponent",
    value: function isFocusedInComponent() {
      return (0, _util.isElInChildren)(this.node, document.activeElement);
    }
  }, {
    key: "renderFilter",
    value: function renderFilter(cal) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "slds-datepicker__filter slds-grid"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "slds-datepicker__filter_month slds-grid slds-grid_align-spread slds-size_2-of-3"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "slds-align-middle"
      }, /*#__PURE__*/_react["default"].createElement(_Button.Button, {
        className: "slds-align-middle",
        type: "icon-container",
        icon: "left",
        size: "small",
        alt: "Previous Month",
        onClick: this.onMonthChange.bind(this, -1)
      })), /*#__PURE__*/_react["default"].createElement("h2", {
        className: "slds-align-middle"
      }, _moment["default"].monthsShort()[cal.month]), /*#__PURE__*/_react["default"].createElement("div", {
        className: "slds-align-middle"
      }, /*#__PURE__*/_react["default"].createElement(_Button.Button, {
        className: "slds-align-middle",
        type: "icon-container",
        icon: "right",
        size: "small",
        alt: "Next Month",
        onClick: this.onMonthChange.bind(this, 1)
      }))), /*#__PURE__*/_react["default"].createElement("div", {
        className: "slds-size_1-of-3"
      }, /*#__PURE__*/_react["default"].createElement(_Select.Select, {
        value: cal.year,
        onChange: this.onYearChange.bind(this)
      }, new Array(11).join('_').split('_').map(function (a, i) {
        var year = cal.year + i - 5;
        return /*#__PURE__*/_react["default"].createElement(_Select.Option, {
          key: year,
          label: String(year),
          value: year
        });
      }))));
    }
  }, {
    key: "renderMonth",
    value: function renderMonth(cal, selectedDate, today) {
      var _this5 = this;

      return /*#__PURE__*/_react["default"].createElement("table", {
        className: "datepicker__month",
        role: "grid",
        "aria-labelledby": "month",
        ref: function ref(node) {
          return _this5.month = node;
        }
      }, /*#__PURE__*/_react["default"].createElement("thead", null, /*#__PURE__*/_react["default"].createElement("tr", null, _moment["default"].weekdaysMin(true).map(function (wd, i) {
        return (
          /*#__PURE__*/
          // eslint-disable-next-line react/no-array-index-key
          _react["default"].createElement("th", {
            key: i
          }, /*#__PURE__*/_react["default"].createElement("abbr", {
            title: _moment["default"].weekdays(true, i)
          }, wd))
        );
      }))), /*#__PURE__*/_react["default"].createElement("tbody", null, cal.weeks.map(function (days, i) {
        return (
          /*#__PURE__*/
          // eslint-disable-next-line react/no-array-index-key
          _react["default"].createElement("tr", {
            key: i
          }, days.map(_this5.renderDate.bind(_this5, cal, selectedDate, today)))
        );
      })));
    }
  }, {
    key: "renderDate",
    value: function renderDate(cal, selectedDate, today, d, i) {
      var selectable = true;
      var enabled = d.year === cal.year && d.month === cal.month;

      if (cal.minDate) {
        var min = (0, _moment["default"])(d.value, 'YYYY-MM-DD').isAfter((0, _moment["default"])(cal.minDate.value, 'YYYY-MM-DD'));
        selectable = selectable && min;
        enabled = enabled && min;
      }

      if (cal.maxDate) {
        var max = (0, _moment["default"])(d.value, 'YYYY-MM-DD').isBefore((0, _moment["default"])(cal.maxDate.value, 'YYYY-MM-DD'));
        selectable = selectable && max;
        enabled = enabled && max;
      }

      var selected = d.value === selectedDate;
      var isToday = d.value === today;
      var dateClassName = (0, _classnames["default"])({
        'slds-disabled-text': !enabled,
        'slds-is-selected': selected,
        'slds-is-today': isToday
      });
      return /*#__PURE__*/_react["default"].createElement("td", {
        className: dateClassName,
        key: i,
        headers: _moment["default"].weekdays(i),
        role: "gridcell",
        "aria-disabled": !enabled,
        "aria-selected": selected
      }, /*#__PURE__*/_react["default"].createElement("span", {
        className: "slds-day" // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
        ,
        tabIndex: selectable ? 0 : -1,
        onClick: selectable ? this.onDateClick.bind(this, d.value) : undefined,
        onKeyDown: selectable ? this.onDateKeyDown.bind(this, d.value) : undefined,
        onFocus: enabled ? this.onDateFocus.bind(this, d.value) : cancelEvent,
        "data-date-value": d.value
      }, d.date));
    }
  }, {
    key: "render",
    value: function render() {
      var _this6 = this;

      var _this$props = this.props,
          className = _this$props.className,
          selectedDate = _this$props.selectedDate,
          minDate = _this$props.minDate,
          maxDate = _this$props.maxDate,
          elementRef = _this$props.elementRef,
          ExtensionRenderer = _this$props.extensionRenderer,
          autoFocus = _this$props.autoFocus,
          onSelect = _this$props.onSelect,
          onClose = _this$props.onClose,
          props = (0, _objectWithoutProperties2["default"])(_this$props, ["className", "selectedDate", "minDate", "maxDate", "elementRef", "extensionRenderer", "autoFocus", "onSelect", "onClose"]);
      var today = (0, _util.getToday)();
      var targetDate = this.state.targetDate || selectedDate;
      var cal = createCalendarObject(targetDate, minDate, maxDate);
      var datepickerClassNames = (0, _classnames["default"])('slds-datepicker', className);

      var handleDOMRef = function handleDOMRef(node) {
        _this6.node = node;

        if (elementRef) {
          elementRef(node);
        }
      };

      return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({}, props, {
        className: datepickerClassNames,
        ref: handleDOMRef,
        tabIndex: -1,
        "aria-hidden": false,
        onBlur: this.onBlur,
        onKeyDown: this.onKeyDown
      }), this.renderFilter(cal), this.renderMonth(cal, selectedDate, today), ExtensionRenderer ? /*#__PURE__*/_react["default"].createElement(ExtensionRenderer, this.props) : undefined);
    }
  }]);
  return Datepicker;
}(_react.Component);

exports.Datepicker = Datepicker;
//# sourceMappingURL=Datepicker.js.map