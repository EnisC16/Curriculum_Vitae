import React, { Component, CSSProperties, KeyboardEvent } from 'react';
import { FormElementProps } from './FormElement';
import { ButtonProps } from './Button';
import { DropdownMenuItemProps, DropdownMenuProps } from './DropdownMenu';
declare type PicklistValueType<ValueType extends string | number, Multi extends boolean | undefined> = Multi extends true ? ValueType[] : Multi extends false | undefined ? ValueType | null : ValueType | ValueType[] | null;
export declare type PicklistProps<ValueType extends string | number, MultiSelect extends boolean | undefined> = {
    label?: string;
    required?: boolean;
    multiSelect?: MultiSelect;
    error?: FormElementProps['error'];
    totalCols?: number;
    cols?: number;
    name?: string;
    value?: PicklistValueType<ValueType, MultiSelect>;
    defaultValue?: PicklistValueType<ValueType, MultiSelect>;
    selectedText?: string;
    optionsSelectedText?: string;
    opened?: boolean;
    defaultOpened?: boolean;
    disabled?: boolean;
    menuSize?: DropdownMenuProps<any>['size'];
    menuStyle?: CSSProperties;
    onValueChange?: (newValue: PicklistValueType<ValueType, MultiSelect>, prevValue: PicklistValueType<ValueType, MultiSelect>) => void;
    onSelect?: (value: ValueType) => void;
    onKeyDown?: (e: KeyboardEvent<HTMLElement>) => void;
    onBlur?: () => void;
    onComplete?: () => void;
} & Omit<ButtonProps, 'type' | 'value' | 'defaultValue' | 'onSelect' | 'onBlur' | 'onKeyDown'>;
export declare type PicklistState<ValueType> = {
    id: string;
    opened?: boolean;
    values: ValueType[];
};
export declare class Picklist<ValueType extends string | number, MultiSelect extends boolean | undefined> extends Component<PicklistProps<ValueType, MultiSelect>, PicklistState<ValueType>> {
    static isFormElement: boolean;
    node: HTMLDivElement | null;
    picklistButton: HTMLButtonElement | null;
    dropdown: HTMLDivElement | null;
    constructor(props: Readonly<PicklistProps<ValueType, MultiSelect>>);
    onClick: () => void;
    onPicklistItemSelect: (val: string | number) => void;
    onPicklistClose: () => void;
    onBlur: () => void;
    onKeydown: (e: KeyboardEvent<HTMLButtonElement>) => void;
    getValues(): ValueType[];
    setValues(newValues: ValueType[]): void;
    getSelectedItemLabel(): string | ValueType;
    updateItemValue(itemValue: ValueType): void;
    isFocusedInComponent(): boolean;
    focusToTargetItemEl(): void;
    renderPicklist(props: PicklistProps<ValueType, MultiSelect>): JSX.Element;
    renderDropdown(menuSize: PicklistProps<ValueType, MultiSelect>['menuSize'], menuStyle: PicklistProps<ValueType, MultiSelect>['menuStyle']): JSX.Element;
    renderPicklistItem: (item: any) => React.DetailedReactHTMLElement<{
        selected: boolean;
        onBlur: () => void;
    }, HTMLElement>;
    render(): JSX.Element;
}
export declare type PicklistItemProps = DropdownMenuItemProps & {
    selected?: boolean;
    disabled?: boolean;
    value?: string | number;
};
export declare const PicklistItem: React.FC<PicklistItemProps>;
export {};
