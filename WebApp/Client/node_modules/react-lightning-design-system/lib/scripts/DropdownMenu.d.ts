import React, { AnchorHTMLAttributes, FocusEvent, HTMLAttributes, SyntheticEvent } from 'react';
import { AutoAlignProps } from './AutoAlign';
export declare type DropdownMenuHeaderProps = {
    className?: string;
    divider?: 'top' | 'bottom';
};
export declare const DropdownMenuHeader: React.FC<DropdownMenuHeaderProps>;
export declare const MenuHeader: React.FC<DropdownMenuHeaderProps>;
declare type DropdownMenuHandler<EventKey extends Key> = {
    onMenuSelect: (eventKey: EventKey) => void;
    onMenuFocus: (e: FocusEvent<HTMLElement>) => void;
    onMenuBlur: (e: FocusEvent<HTMLElement>) => void;
};
export declare const DropdownMenuHandlerContext: React.Context<DropdownMenuHandler<string | number>>;
export declare type DropdownMenuItemProps = {
    label?: string;
    eventKey?: string | number;
    icon?: string;
    iconRight?: string;
    disabled?: boolean;
    divider?: 'top' | 'bottom';
    selected?: boolean;
    onClick?: (e: SyntheticEvent<HTMLElement>) => void;
} & Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'onClick'>;
export declare const DropdownMenuItem: (props: DropdownMenuItemProps) => JSX.Element;
export declare const MenuItem: (props: DropdownMenuItemProps) => JSX.Element;
declare type Key = string | number;
export declare type DropdownMenuProps<EventKey extends Key> = HTMLAttributes<HTMLElement> & {
    size?: 'small' | 'medium' | 'large';
    header?: string;
    nubbin?: 'top' | 'top left' | 'top right' | 'bottom' | 'bottom left' | 'bottom right' | 'auto';
    nubbinTop?: boolean;
    hoverPopup?: boolean;
    onMenuSelect?: (eventKey: EventKey) => void;
    onMenuClose?: () => void;
    dropdownMenuRef?: (node: HTMLDivElement) => void;
};
declare type DropdownMenuType = <EventKey extends Key>(props: DropdownMenuProps<EventKey> & AutoAlignProps) => JSX.Element;
export declare const DropdownMenu: DropdownMenuType;
export {};
