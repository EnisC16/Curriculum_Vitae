{"version":3,"sources":["../../src/scripts/Modal.tsx"],"names":["ModalHeader","props","onClose","bind","className","title","tagline","closeButton","hdClassNames","Component","ModalContent","children","ctClassNames","ModalFooter","directional","ftClassNames","Modal","renderChildComponent","onHide","comp","type","React","cloneElement","hide","opened","size","containerStyle","modalClassNames","backdropClassNames","Children","map"],"mappings":"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","sourcesContent":["import React, { Component, HTMLAttributes, CSSProperties } from 'react';\nimport classnames from 'classnames';\nimport { Button } from './Button';\n\nexport type ModalHeaderProps = {\n  className?: string;\n  title?: string;\n  tagline?: string;\n  closeButton?: boolean;\n  onClose?: () => void;\n};\n\nexport class ModalHeader extends Component<ModalHeaderProps> {\n  constructor(props: Readonly<ModalHeaderProps>) {\n    super(props);\n\n    this.onClose = this.onClose.bind(this);\n  }\n\n  onClose() {\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n  }\n\n  render() {\n    const { className, title, tagline, closeButton, ...props } = this.props;\n    delete props.onClose;\n    const hdClassNames = classnames(className, 'slds-modal__header');\n    return (\n      <div className={hdClassNames} {...props}>\n        <h2 className='slds-text-heading_medium'>{title}</h2>\n        {tagline ? <p className='slds-m-top_x-small'>{tagline}</p> : null}\n        {closeButton ? (\n          <Button\n            type='icon-inverse'\n            className='slds-modal__close'\n            icon='close'\n            iconSize='large'\n            alt='Close'\n            inverse\n            onClick={this.onClose}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport type ModalContentProps = {\n  className?: string;\n};\n\nexport const ModalContent: React.FC<ModalContentProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const ctClassNames = classnames(className, 'slds-modal__content');\n  return (\n    <div className={ctClassNames} {...props}>\n      {children}\n    </div>\n  );\n};\n\nexport type ModalFooterProps = {\n  className?: string;\n  directional?: boolean;\n};\n\nexport const ModalFooter: React.FC<ModalFooterProps> = ({\n  className,\n  directional,\n  children,\n  ...props\n}) => {\n  const ftClassNames = classnames(className, 'slds-modal__footer', {\n    'slds-modal__footer_directional': directional,\n  });\n  return (\n    <div className={ftClassNames} {...props}>\n      {children}\n    </div>\n  );\n};\n\nexport type ModalSize = 'large';\n\nexport type ModalProps = {\n  size?: ModalSize;\n  opened?: boolean;\n  containerStyle?: CSSProperties;\n  onHide?: () => void;\n} & HTMLAttributes<HTMLDivElement>;\n\nexport class Modal extends Component<ModalProps> {\n  static Header = ModalHeader;\n\n  static Content = ModalContent;\n\n  static Footer = ModalFooter;\n\n  constructor(props: Readonly<ModalProps>) {\n    super(props);\n\n    this.renderChildComponent = this.renderChildComponent.bind(this);\n  }\n\n  hide() {\n    if (this.props.onHide) {\n      this.props.onHide();\n    }\n  }\n\n  renderChildComponent(comp: any) {\n    if (comp.type === ModalHeader) {\n      return React.cloneElement(comp, { onClose: this.hide.bind(this) } as any);\n    }\n    return comp;\n  }\n\n  render() {\n    const {\n      className,\n      opened,\n      children,\n      size,\n      containerStyle,\n      ...props\n    } = this.props;\n    delete props.onHide;\n    const modalClassNames = classnames(className, 'slds-modal', {\n      'slds-fade-in-open': opened,\n      'slds-modal_large': size === 'large',\n    });\n    const backdropClassNames = classnames(className, 'slds-backdrop', {\n      'slds-backdrop_open': opened,\n    });\n    return (\n      <div>\n        <div\n          className={modalClassNames}\n          aria-hidden={!opened}\n          role='dialog'\n          {...props}\n        >\n          <div className='slds-modal__container' style={containerStyle}>\n            {React.Children.map(children, this.renderChildComponent)}\n          </div>\n        </div>\n        <div className={backdropClassNames} />\n      </div>\n    );\n  }\n}\n"],"file":"Modal.js"}