{"version":3,"sources":["../../src/scripts/TreeNode.tsx"],"names":["TreeNode","props","state","opened","defaultOpened","e","onToggle","onNodeToggle","setState","prevState","onLabelClick","onNodeLabelClick","onClick","onNodeClick","toggleOnNodeClick","itemProps","className","label","icon","loading","selected","leaf","isOpened","children","itemRender","itmClassNames","bind","position","marginTop","marginLeft","level","tnode","React","cloneElement","grpClassNames","renderTreeItem","Children","map","renderChildNode","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { Button } from './Button';\nimport { Spinner } from './Spinner';\n\nexport type TreeNodeProps = {\n  className?: string;\n  label?: string | JSX.Element;\n  toggleOnNodeClick?: boolean;\n  defaultOpened?: boolean;\n  opened?: boolean;\n  selected?: boolean;\n  leaf?: boolean;\n  loading?: boolean;\n  level?: number;\n  onClick?: (e: React.MouseEvent, props: any) => void;\n  onToggle?: (e: React.MouseEvent, props: any) => void;\n  onNodeToggle?: (e: React.MouseEvent, props: any) => void;\n  onNodeLabelClick?: (e: React.MouseEvent, props: any) => void;\n  onLabelClick?: (e: React.MouseEvent, props: any) => void;\n  onNodeClick?: (e: React.MouseEvent, props: any) => void;\n  itemRender?: (props: any) => void;\n};\n\ntype TreeNodeState = {\n  opened?: boolean;\n};\n\nexport class TreeNode extends Component<TreeNodeProps, TreeNodeState> {\n  constructor(props: Readonly<TreeNodeProps>) {\n    super(props);\n    this.state = { opened: this.props.defaultOpened };\n  }\n\n  onToggle(\n    e: React.MouseEvent<HTMLButtonElement | HTMLDivElement, MouseEvent>\n  ) {\n    const { onToggle, onNodeToggle } = this.props;\n    if (onToggle) {\n      onToggle(e, this.props);\n    }\n    if (onNodeToggle) {\n      onNodeToggle(e, this.props);\n    }\n    this.setState((prevState) => ({ opened: !prevState.opened }));\n  }\n\n  onLabelClick(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    const { onLabelClick, onNodeLabelClick } = this.props;\n    if (onLabelClick) {\n      onLabelClick(e, this.props);\n    }\n    if (onNodeLabelClick) {\n      onNodeLabelClick(e, this.props);\n    }\n  }\n\n  onClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { onClick, onNodeClick, toggleOnNodeClick } = this.props;\n    if (onClick) {\n      onClick(e, this.props);\n    }\n    if (onNodeClick) {\n      onNodeClick(e, this.props);\n    }\n    if (toggleOnNodeClick) {\n      this.onToggle(e);\n    }\n  }\n\n  renderTreeItem(itemProps: any) {\n    const {\n      className,\n      label,\n      icon = 'chevronright',\n      loading,\n      selected,\n      leaf,\n      isOpened,\n      children,\n      itemRender,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onNodeClick,\n      onNodeToggle,\n      onNodeLabelClick,\n      toggleOnNodeClick,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = itemProps;\n    const itmClassNames = classnames(className, 'slds-tree__item', {\n      'slds-is-open': isOpened,\n      'slds-is-selected': selected,\n    });\n    return (\n      <div\n        className={itmClassNames}\n        onClick={this.onClick.bind(this)}\n        style={{ position: 'relative' }}\n        {...props}\n      >\n        {loading ? (\n          <Spinner\n            container={false}\n            size='small'\n            className='slds-m-right_x-small'\n            style={{ position: 'static', marginTop: 14, marginLeft: -2 }}\n          />\n        ) : !leaf ? (\n          <Button\n            className='slds-m-right_small'\n            aria-controls=''\n            type='icon-bare'\n            icon={icon}\n            iconSize='small'\n            onClick={this.onToggle.bind(this)}\n          />\n        ) : null}\n        <a\n          className='slds-truncate'\n          tabIndex={-1}\n          role='presentation'\n          onClick={this.onLabelClick.bind(this)}\n        >\n          {itemRender ? itemRender(itemProps) : label}\n        </a>\n        {leaf ? children : null}\n      </div>\n    );\n  }\n\n  renderChildNode(level: number, tnode: any) {\n    const {\n      onNodeClick,\n      onNodeToggle,\n      onNodeLabelClick,\n      toggleOnNodeClick,\n    } = this.props;\n    return React.cloneElement(tnode, {\n      level,\n      onNodeClick,\n      onNodeToggle,\n      onNodeLabelClick,\n      toggleOnNodeClick,\n    });\n  }\n\n  render() {\n    const {\n      defaultOpened,\n      opened,\n      leaf,\n      level = 1,\n      children,\n      ...props\n    } = this.props;\n    const isOpened =\n      typeof opened !== 'undefined'\n        ? opened\n        : typeof this.state.opened !== 'undefined'\n        ? this.state.opened\n        : defaultOpened;\n    const grpClassNames = classnames('slds-tree__group', {\n      'slds-nested': !leaf,\n      'is-expanded': isOpened,\n      'slds-show': isOpened,\n      'slds-hide': !isOpened,\n    });\n    const itemProps = { leaf, isOpened, children, ...props };\n    if (leaf) {\n      return (\n        <li role='treeitem' aria-level={level}>\n          {this.renderTreeItem(itemProps)}\n        </li>\n      );\n    }\n\n    return (\n      <li role='treeitem' aria-level={level} aria-expanded={isOpened}>\n        {this.renderTreeItem(itemProps)}\n        <ul className={grpClassNames} role='group'>\n          {React.Children.map(\n            children,\n            this.renderChildNode.bind(this, level + 1)\n          )}\n        </ul>\n      </li>\n    );\n  }\n}\n"],"file":"TreeNode.js"}