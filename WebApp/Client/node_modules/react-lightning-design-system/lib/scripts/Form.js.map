{"version":3,"sources":["../../src/scripts/Form.tsx"],"names":["Form","props","renderFormElement","bind","element","type","isFormElement","id","formElemProps","React","cloneElement","className","children","formClassNames","Children","map","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;IAMaA,I;;;;;AAKX,gBAAYC,KAAZ,EAAwC;AAAA;;AAAA;AACtC,8BAAMA,KAAN;AAEA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,gDAAzB;AAHsC;AAIvC;;;;sCAEiBC,O,EAAc;AAC9B,UAAIA,OAAO,IAAI,CAACA,OAAO,CAACC,IAAR,CAAaC,aAA7B,EAA4C;AAAA,gCACAF,OAAO,CAACH,KADR,CAClCM,EADkC;AAAA,YAClCA,EADkC,yDACb,iBADa;AAE1C,YAAMC,aAAa,GAAG;AAAED,UAAAA,EAAE,EAAFA;AAAF,SAAtB;AACA,4BACE,gCAAC,wBAAD,EAAiBC,aAAjB,eACGC,kBAAMC,YAAN,CAAmBN,OAAnB,EAA4B;AAAEG,UAAAA,EAAE,EAAFA;AAAF,SAA5B,CADH,CADF;AAKD;;AACD,aAAOH,OAAP;AACD;;;6BAEQ;AAAA,wBACyC,KAAKH,KAD9C;AAAA,UACCU,SADD,eACCA,SADD;AAAA,UACYN,IADZ,eACYA,IADZ;AAAA,UACkBO,QADlB,eACkBA,QADlB;AAAA,UAC+BX,KAD/B;AAEP,UAAMY,cAAc,GAAG,4BAAWF,SAAX,sBAAmCN,IAAnC,EAAvB;AACA,0BACE;AAAM,QAAA,SAAS,EAAEQ;AAAjB,SAAqCZ,KAArC,GACGQ,kBAAMK,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6B,KAAKV,iBAAlC,CADH,CADF;AAKD;;;EAhCuBc,gB;;;iCAAbhB,I,kBACoC;AAC7CK,EAAAA,IAAI,EAAE;AADuC,C","sourcesContent":["import React, { Component, FormHTMLAttributes } from 'react';\nimport classnames from 'classnames';\nimport { FormElement } from './FormElement';\nimport { uuid } from './util';\n\nexport type FormProps = {\n  type?: 'stacked' | 'horizontal' | 'inline' | 'compound';\n} & FormHTMLAttributes<HTMLFormElement>;\n\nexport class Form extends Component<FormProps, {}> {\n  static defaultProps: Pick<FormProps, 'type'> = {\n    type: 'stacked',\n  };\n\n  constructor(props: Readonly<FormProps>) {\n    super(props);\n\n    this.renderFormElement = this.renderFormElement.bind(this);\n  }\n\n  renderFormElement(element: any) {\n    if (element && !element.type.isFormElement) {\n      const { id = `form-element-${uuid()}` } = element.props;\n      const formElemProps = { id };\n      return (\n        <FormElement {...formElemProps}>\n          {React.cloneElement(element, { id })}\n        </FormElement>\n      );\n    }\n    return element;\n  }\n\n  render() {\n    const { className, type, children, ...props } = this.props;\n    const formClassNames = classnames(className, `slds-form_${type}`);\n    return (\n      <form className={formClassNames} {...props}>\n        {React.Children.map(children, this.renderFormElement)}\n      </form>\n    );\n  }\n}\n"],"file":"Form.js"}