import React, { Component, InputHTMLAttributes, ChangeEvent, KeyboardEvent, SyntheticEvent } from 'react';
import { InjectedProps } from './AutoAlign';
import { FormElementProps } from './FormElement';
import { InputProps } from './Input';
import { IconCategory } from './Icon';
/**
 *
 */
declare type Entry = {
    label: string;
    value: string;
    icon?: string;
    scope?: string;
    category?: IconCategory;
    meta?: string;
};
export declare type LookupEntry = Entry;
export declare type LookupSelectionProps<LookupEntry extends Entry> = {
    id?: string;
    selected?: LookupEntry;
    hidden?: boolean;
    onResetSelection?: (e?: any) => void;
    lookupSelectionRef?: (node: HTMLDivElement) => void;
};
/**
 *
 */
export declare class LookupSelection<LookupEntry extends Entry> extends Component<LookupSelectionProps<LookupEntry>> {
    pill: HTMLElement | null;
    onKeyDown: (e: KeyboardEvent<HTMLElement>) => void;
    renderPill(selected: LookupEntry): JSX.Element;
    render(): JSX.Element;
}
export declare type LookupScope = {
    label: string;
    value: string;
    icon: string;
};
export declare type LookupSearchProps = Omit<InputProps, 'value' | 'defaultValue' | 'onChange' | 'onSelect'> & {
    hidden?: boolean;
    searchText?: string;
    scopes?: LookupScope[];
    targetScope?: any;
    iconAlign?: 'left' | 'right';
    disabled?: boolean;
    onBlur?: () => void;
    onSearchTextChange?: (searchText: string) => void;
    onScopeMenuClick?: (e: SyntheticEvent<HTMLButtonElement>) => void;
    onScopeSelect?: (value: string) => void;
    onPressDown?: () => void;
    onSubmit?: () => void;
    onComplete?: (cancel?: boolean) => void;
    lookupSearchRef?: (node: HTMLDivElement) => void;
};
/**
 *
 */
export declare class LookupSearch extends Component<LookupSearchProps> {
    input: HTMLInputElement | null;
    node: HTMLDivElement | null;
    constructor(props: Readonly<LookupSearchProps>);
    onLookupIconClick: () => void;
    onInputKeyDown: (e: KeyboardEvent<HTMLInputElement>) => void;
    onInputChange: (e: ChangeEvent<HTMLInputElement>) => void;
    onInputBlur: () => void;
    handleLookupSearchRef: (node: HTMLDivElement) => void;
    isFocusedInComponent(): boolean;
    renderSearchInput(props: LookupSearchProps & {}): JSX.Element;
    renderScopeSelector({ scopes, targetScope: target, disabled }: any): JSX.Element;
    render(): JSX.Element;
}
declare type LookupCandidateListInternalProps<LookupEntry extends Entry> = {
    data?: LookupEntry[];
    focus?: boolean;
    loading?: boolean;
    filter?: (entry: LookupEntry) => boolean;
    listRef?: (node: HTMLDivElement) => void;
    onSelect?: (entry: LookupEntry | null) => void;
    onBlur?: (e: React.FocusEvent<HTMLAnchorElement>) => void;
    header?: JSX.Element;
    footer?: JSX.Element;
};
export declare type LookupCandidateListProps<LookupEntry extends Entry> = LookupCandidateListInternalProps<LookupEntry> & InjectedProps;
export declare type LookupProps<LookupEntry extends Entry, SelectedEntry extends LookupEntry> = {
    label?: string;
    disabled?: boolean;
    required?: boolean;
    error?: FormElementProps['error'];
    iconAlign?: 'left' | 'right';
    value?: string | null;
    defaultValue?: string | null;
    selected?: SelectedEntry | null;
    defaultSelected?: SelectedEntry | null;
    opened?: boolean;
    defaultOpened?: boolean;
    searchText?: string;
    defaultSearchText?: string;
    loading?: boolean;
    data?: LookupEntry[];
    lookupFilter?: (entry: LookupEntry, searchText?: string, targetScope?: string) => boolean;
    listHeader?: JSX.Element;
    listFooter?: JSX.Element;
    scopes?: LookupScope[];
    targetScope?: string;
    defaultTargetScope?: string;
    totalCols?: number;
    cols?: number;
    onSearchTextChange?: (searchText: string) => void;
    onScopeMenuClick?: (e: SyntheticEvent<HTMLButtonElement>) => void;
    onScopeSelect?: (targetScope: string) => void;
    onLookupRequest?: (searchText: string) => void;
    onBlur?: () => void;
    onFocus?: () => void;
    onSelect?: (entry: LookupEntry | null) => void;
    onComplete?: (cancel?: boolean) => void;
} & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'onBlur' | 'onFocus' | 'onSelect'>;
export declare type LookupState<LookupEntry extends Entry> = {
    id: string;
    selected?: LookupEntry | null;
    opened?: boolean;
    searchText?: string;
    targetScope?: string;
    focusFirstCandidate: boolean;
};
/**
 *
 */
export declare class Lookup<LookupEntry extends Entry, SelectedEntry extends LookupEntry> extends Component<LookupProps<LookupEntry, SelectedEntry>, LookupState<LookupEntry>> {
    static isFormElement: boolean;
    node: HTMLDivElement | null;
    selection: HTMLDivElement | null;
    candidateList: HTMLDivElement | null;
    private search;
    constructor(props: Readonly<LookupProps<LookupEntry, SelectedEntry>>);
    onScopeMenuClick: (e: SyntheticEvent<HTMLButtonElement>) => void;
    onScopeSelect: (targetScope: string) => void;
    onSearchTextChange: (searchText: string) => void;
    onLookupRequest: (searchText: string) => void;
    onResetSelection(): void;
    onLookupItemSelect(selected: LookupEntry | null): void;
    onFocusFirstCandidate(): void;
    onBlur(): void;
    isFocusedInComponent(): boolean;
    render(): JSX.Element;
}
export {};
