"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _keycoder = _interopRequireDefault(require("keycoder"));

var _Icon = require("./Icon");

var _FormElement = require("./FormElement");

var _Text = require("./Text");

var _util = require("./util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Input = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Input, _Component);

  var _super = _createSuper(Input);

  function Input(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Input);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onChange", function (e) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onValueChange = _this$props.onValueChange;

      if (onChange) {
        onChange(e);
      }

      if (onValueChange) {
        onValueChange(e.target.value);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onKeyDown", function (e) {
      var _this$props2 = _this.props,
          symbolPattern = _this$props2.symbolPattern,
          onKeyDown = _this$props2.onKeyDown;

      if (symbolPattern) {
        var keyCode = e.keyCode,
            shiftKey = e.shiftKey;

        var _value = _keycoder["default"].toCharacter(keyCode, shiftKey);

        if (_value && !_value.match(new RegExp(symbolPattern))) {
          e.preventDefault();
          return;
        }
      }

      if (onKeyDown) {
        onKeyDown(e);
      }
    });

    _this.registerIconStyle();

    return _this;
  }

  (0, _createClass2["default"])(Input, [{
    key: "registerIconStyle",
    value: function registerIconStyle() {
      (0, _util.registerStyle)('input-icons', [// fix styles of double-iconed input
      ['.slds-input-has-icon_left-right .slds-input__icon_right', '{ left: auto; }']]);
    }
  }, {
    key: "renderAddon",
    value: function renderAddon(content) {
      return /*#__PURE__*/_react["default"].createElement(_Text.Text, {
        tag: "span",
        className: "slds-form-element__addon",
        category: "body",
        type: "regular"
      }, content);
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(icon, align) {
      return /*#__PURE__*/_react["default"].isValidElement(icon) ? icon : /*#__PURE__*/_react["default"].createElement(_Icon.Icon, {
        icon: icon,
        className: (0, _classnames["default"])('slds-input__icon', "slds-input__icon_".concat(align), 'slds-icon-text-default')
      });
    }
  }, {
    key: "renderInput",
    value: function renderInput(props) {
      var id = props.id,
          readOnly = props.readOnly,
          className = props.className,
          inputRef = props.inputRef,
          type = props.type,
          bare = props.bare,
          value = props.value,
          defaultValue = props.defaultValue,
          htmlReadOnly = props.htmlReadOnly,
          pprops = (0, _objectWithoutProperties2["default"])(props, ["id", "readOnly", "className", "inputRef", "type", "bare", "value", "defaultValue", "htmlReadOnly"]);
      var inputClassNames = (0, _classnames["default"])(className, bare ? 'slds-input_bare' : 'slds-input');
      return readOnly ? /*#__PURE__*/_react["default"].createElement(_Text.Text, {
        type: "regular",
        category: "body",
        className: "slds-form-element__static",
        id: id
      }, value) : /*#__PURE__*/_react["default"].createElement("input", (0, _extends2["default"])({
        ref: inputRef,
        className: inputClassNames,
        id: id,
        type: type,
        value: value,
        defaultValue: defaultValue,
        readOnly: htmlReadOnly
      }, pprops, {
        onChange: this.onChange,
        onKeyDown: this.onKeyDown
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          _this$props3$id = _this$props3.id,
          id = _this$props3$id === void 0 ? "input-".concat((0, _util.uuid)()) : _this$props3$id,
          label = _this$props3.label,
          required = _this$props3.required,
          error = _this$props3.error,
          readOnly = _this$props3.readOnly,
          totalCols = _this$props3.totalCols,
          cols = _this$props3.cols,
          props = (0, _objectWithoutProperties2["default"])(_this$props3, ["id", "label", "required", "error", "readOnly", "totalCols", "cols"]);

      if (label || required || error || totalCols || cols) {
        var formElemProps = {
          id: id,
          label: label,
          required: required,
          error: error,
          readOnly: readOnly,
          totalCols: totalCols,
          cols: cols
        };
        return /*#__PURE__*/_react["default"].createElement(_FormElement.FormElement, formElemProps, /*#__PURE__*/_react["default"].createElement(Input, _objectSpread({
          id: id,
          readOnly: readOnly
        }, props)));
      }

      var iconLeft = props.iconLeft,
          iconRight = props.iconRight,
          addonLeft = props.addonLeft,
          addonRight = props.addonRight,
          pprops = (0, _objectWithoutProperties2["default"])(props, ["iconLeft", "iconRight", "addonLeft", "addonRight"]);

      var inputProps = _objectSpread(_objectSpread({}, pprops), {}, {
        id: id,
        readOnly: readOnly
      });

      if (iconLeft || iconRight || addonLeft || addonRight) {
        var wrapperClassName = (0, _classnames["default"])('slds-form-element__control', {
          'slds-input-has-icon': iconLeft || iconRight
        }, {
          'slds-input-has-icon_left-right': iconLeft && iconRight
        }, {
          'slds-input-has-icon_left': iconLeft
        }, {
          'slds-input-has-icon_right': iconRight
        }, {
          'slds-input-has-fixed-addon': addonLeft || addonRight
        });
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: wrapperClassName
        }, addonLeft ? this.renderAddon(addonLeft) : undefined, iconLeft ? this.renderIcon(iconLeft, 'left') : undefined, this.renderInput(inputProps), iconRight ? this.renderIcon(iconRight, 'right') : undefined, addonRight ? this.renderAddon(addonRight) : undefined);
      }

      return this.renderInput(inputProps);
    }
  }]);
  return Input;
}(_react.Component);

exports.Input = Input;
(0, _defineProperty2["default"])(Input, "isFormElement", true);
//# sourceMappingURL=Input.js.map