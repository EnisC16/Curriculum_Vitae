{"version":3,"sources":["../../src/scripts/RadioGroup.tsx"],"names":["RadioGroup","radio","props","name","React","cloneElement","onChange","onControlChange","bind","value","onValueChange","className","label","required","error","totalCols","cols","style","children","grpClassNames","grpStyles","display","errorMessage","message","undefined","Children","map","renderControl","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;IAYaA,U;;;;;;;;;;;;;;;sGAWK,UAACC,KAAD,EAAgB;AAC9B,aAAO,MAAKC,KAAL,CAAWC,IAAX,gBACHC,kBAAMC,YAAN,CAAmBJ,KAAnB,EAA0B;AACxBE,QAAAA,IAAI,EAAE,MAAKD,KAAL,CAAWC,IADO;AAExBG,QAAAA,QAAQ,EAAE,MAAKC,eAAL,CAAqBC,IAArB,iDAAgCP,KAAK,CAACC,KAAN,CAAYO,KAA5C;AAFc,OAA1B,CADG,GAKHR,KALJ;AAMD,K;;;;;;oCAbeQ,K,EAAkB;AAChC,UAAI,KAAKP,KAAL,CAAWQ,aAAf,EAA8B;AAC5B,aAAKR,KAAL,CAAWQ,aAAX,CAAyBD,KAAzB;AACD;AACF;;;6BAWQ;AAAA,wBAYH,KAAKP,KAZF;AAAA,UAELS,SAFK,eAELA,SAFK;AAAA,UAGLC,KAHK,eAGLA,KAHK;AAAA,UAILC,QAJK,eAILA,QAJK;AAAA,UAKLC,KALK,eAKLA,KALK;AAAA,UAMLC,SANK,eAMLA,SANK;AAAA,UAOLC,IAPK,eAOLA,IAPK;AAAA,UAQLC,KARK,eAQLA,KARK;AAAA,UASLC,QATK,eASLA,QATK;AAAA,UAULZ,QAVK,eAULA,QAVK;AAAA,UAWFJ,KAXE;AAaP,UAAMiB,aAAa,GAAG,4BACpBR,SADoB,EAEpB,mBAFoB,EAGpB;AACE,0BAAkBG,KADpB;AAEE,4BAAoBD;AAFtB,OAHoB,EAOpB,OAAOE,SAAP,KAAqB,QAArB,uBACiBC,IAAI,IAAI,CADzB,iBACiCD,SADjC,IAEI,IATgB,CAAtB;AAWA,UAAMK,SAAS,GACb,OAAOL,SAAP,KAAqB,QAArB;AACMM,QAAAA,OAAO,EAAE;AADf,SACkCJ,KADlC,IAEIA,KAHN;AAIA,UAAMK,YAAY,GAAGR,KAAK,GACtB,OAAOA,KAAP,KAAiB,QAAjB,GACEA,KADF,GAEE,yBAAOA,KAAP,MAAiB,QAAjB,GACAA,KAAK,CAACS,OADN,GAEAC,SALoB,GAMtBA,SANJ;AAQA,0BACE;AAAU,QAAA,SAAS,EAAEL,aAArB;AAAoC,QAAA,KAAK,EAAEC;AAA3C,SAA0DlB,KAA1D,gBACE;AAAQ,QAAA,SAAS,EAAC;AAAlB,SACGU,KADH,EAEGC,QAAQ,gBAAG;AAAM,QAAA,SAAS,EAAC;AAAhB,aAAH,GAA8CW,SAFzD,CADF,eAKE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGpB,kBAAMqB,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,EAA6B,KAAKS,aAAlC,CADH,EAEGL,YAAY,gBACX;AAAK,QAAA,SAAS,EAAC;AAAf,SAA0CA,YAA1C,CADW,GAGXE,SALJ,CALF,CADF;AAgBD;;;EAtEOpB,kBAAMwB,S;;;iCAFH5B,U,mBAGY,I","sourcesContent":["import React, { HTMLAttributes } from 'react';\nimport classnames from 'classnames';\n\nexport type RadioGroupProps<ValueType extends string | number> = {\n  label?: string;\n  required?: boolean;\n  error?: any; // FIXME: should be FormElementProps.error\n  name?: string;\n  totalCols?: number;\n  cols?: number;\n  onValueChange?: (value: ValueType) => void;\n} & HTMLAttributes<HTMLFieldSetElement>;\n\nexport class RadioGroup<\n  ValueType extends string | number\n> extends React.Component<RadioGroupProps<ValueType>, {}> {\n  static isFormElement = true;\n\n  onControlChange(value: ValueType) {\n    if (this.props.onValueChange) {\n      this.props.onValueChange(value);\n    }\n  }\n\n  renderControl = (radio: any) => {\n    return this.props.name\n      ? React.cloneElement(radio, {\n          name: this.props.name,\n          onChange: this.onControlChange.bind(this, radio.props.value),\n        })\n      : radio;\n  };\n\n  render() {\n    const {\n      className,\n      label,\n      required,\n      error,\n      totalCols,\n      cols,\n      style,\n      children,\n      onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n      ...props\n    } = this.props;\n    const grpClassNames = classnames(\n      className,\n      'slds-form-element',\n      {\n        'slds-has-error': error,\n        'slds-is-required': required,\n      },\n      typeof totalCols === 'number'\n        ? `slds-size_${cols || 1}-of-${totalCols}`\n        : null\n    );\n    const grpStyles =\n      typeof totalCols === 'number'\n        ? { display: 'inline-block', ...style }\n        : style;\n    const errorMessage = error\n      ? typeof error === 'string'\n        ? error\n        : typeof error === 'object'\n        ? error.message\n        : undefined\n      : undefined;\n\n    return (\n      <fieldset className={grpClassNames} style={grpStyles} {...props}>\n        <legend className='slds-form-element__label'>\n          {label}\n          {required ? <abbr className='slds-required'>*</abbr> : undefined}\n        </legend>\n        <div className='slds-form-element__control'>\n          {React.Children.map(children, this.renderControl)}\n          {errorMessage ? (\n            <div className='slds-form-element__help'>{errorMessage}</div>\n          ) : (\n            undefined\n          )}\n        </div>\n      </fieldset>\n    );\n  }\n}\n"],"file":"RadioGroup.js"}