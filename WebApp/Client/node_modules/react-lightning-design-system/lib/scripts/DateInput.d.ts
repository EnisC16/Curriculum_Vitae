import { Component, KeyboardEvent, ChangeEvent, FocusEvent } from 'react';
import { InputProps } from './Input';
export declare type DateInputProps = {
    value?: string | null;
    defaultValue?: string | null;
    opened?: boolean;
    defaultOpened?: boolean;
    dateFormat?: string;
    includeTime?: boolean;
    minDate?: string;
    maxDate?: string;
    menuAlign?: 'left' | 'right';
    onBlur?: () => void;
    onValueChange?: (value: string | null, prevValue: string | null) => void;
    onComplete?: () => void;
    extensionRenderer?: (...props: any[]) => JSX.Element;
} & Omit<InputProps, 'value' | 'defaultValue' | 'onBlur' | 'onValueChange'>;
declare type DateInputState = {
    id: string;
    opened: boolean;
    value: string | null;
    inputValue: string | null;
};
/**
 *
 */
export declare class DateInput extends Component<DateInputProps, DateInputState> {
    static isFormElement: boolean;
    node: HTMLDivElement | null;
    datepicker: HTMLDivElement | null;
    input: HTMLInputElement | null;
    constructor(props: Readonly<DateInputProps>);
    componentDidUpdate(prevProps: DateInputProps, prevState: DateInputState): void;
    onDateIconClick(): void;
    onInputKeyDown(e: KeyboardEvent<HTMLInputElement>): void;
    onInputChange(e: ChangeEvent<HTMLInputElement>): void;
    onInputBlur(e: FocusEvent<HTMLInputElement | HTMLButtonElement>): void;
    onDatepickerSelect(dvalue: string): void;
    onDatepickerBlur(): void;
    onDatepickerClose(): void;
    getValueFormat(): "YYYY-MM-DD" | "YYYY-MM-DDTHH:mm:ss.SSSZ";
    getInputValueFormat(): string;
    setValueFromInput(inputValue: string): void;
    isFocusedInComponent(): boolean;
    showDatepicker(): void;
    renderInput({ inputValue, ...props }: {
        inputValue: string | undefined;
    } & InputProps): JSX.Element;
    render(): JSX.Element;
}
export {};
