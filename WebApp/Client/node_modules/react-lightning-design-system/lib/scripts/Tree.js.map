{"version":3,"sources":["../../src/scripts/Tree.tsx"],"names":["Tree","props","renderTreeNode","bind","tnode","onNodeClick","onNodeToggle","onNodeLabelClick","toggleOnNodeClick","level","className","label","children","treeClassNames","Children","map","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAMA;;;;;;IAUaA,I;;;;;AACX,gBAAYC,KAAZ,EAAwC;AAAA;;AAAA;AACtC,8BAAMA,KAAN;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,gDAAtB;AAFsC;AAGvC;;;;mCAEcC,K,EAAY;AAAA,wBAMrB,KAAKH,KANgB;AAAA,UAEvBI,WAFuB,eAEvBA,WAFuB;AAAA,UAGvBC,YAHuB,eAGvBA,YAHuB;AAAA,UAIvBC,gBAJuB,eAIvBA,gBAJuB;AAAA,UAKvBC,iBALuB,eAKvBA,iBALuB;AAOzB,0BAAO,yBAAaJ,KAAb,EAAoB;AACzBK,QAAAA,KAAK,EAAE,CADkB;AAEzBJ,QAAAA,WAAW,EAAXA,WAFyB;AAGzBC,QAAAA,YAAY,EAAZA,YAHyB;AAIzBC,QAAAA,gBAAgB,EAAhBA,gBAJyB;AAKzBC,QAAAA,iBAAiB,EAAjBA;AALyB,OAApB,CAAP;AAOD;;;6BAEQ;AAAA,yBAYH,KAAKP,KAZF;AAAA,UAELS,SAFK,gBAELA,SAFK;AAAA,UAGLC,KAHK,gBAGLA,KAHK;AAAA,UAILC,QAJK,gBAILA,QAJK;AAAA,UAMLP,WANK,gBAMLA,WANK;AAAA,UAOLC,YAPK,gBAOLA,YAPK;AAAA,UAQLC,gBARK,gBAQLA,gBARK;AAAA,UASLC,iBATK,gBASLA,iBATK;AAAA,UAWFP,KAXE;AAaP,UAAMY,cAAc,GAAG,4BAAWH,SAAX,EAAsB,qBAAtB,CAAvB;AACA,0BACE;AAAK,QAAA,SAAS,EAAEG,cAAhB;AAAgC,QAAA,IAAI,EAAC;AAArC,SAAuDZ,KAAvD,GACGU,KAAK,gBAAG;AAAI,QAAA,SAAS,EAAC;AAAd,SAAyCA,KAAzC,CAAH,GAA0D,IADlE,eAEE;AAAI,QAAA,SAAS,EAAC,WAAd;AAA0B,QAAA,IAAI,EAAC;AAA/B,SACGG,gBAASC,GAAT,CAAaH,QAAb,EAAuB,KAAKV,cAA5B,CADH,CAFF,CADF;AAQD;;;EA5CuBc,gB","sourcesContent":["import React, {\n  Component,\n  Children,\n  cloneElement,\n  HTMLAttributes,\n} from 'react';\nimport classnames from 'classnames';\n\nexport type TreeProps = {\n  label?: string;\n  toggleOnNodeClick?: boolean;\n  onNodeClick?: (...args: any[]) => any;\n  onNodeToggle?: (...args: any[]) => any;\n  onNodeLabelClick?: (...args: any[]) => any;\n} & HTMLAttributes<HTMLDivElement>;\n\nexport class Tree extends Component<TreeProps, {}> {\n  constructor(props: Readonly<TreeProps>) {\n    super(props);\n    this.renderTreeNode = this.renderTreeNode.bind(this);\n  }\n\n  renderTreeNode(tnode: any) {\n    const {\n      onNodeClick,\n      onNodeToggle,\n      onNodeLabelClick,\n      toggleOnNodeClick,\n    } = this.props;\n    return cloneElement(tnode, {\n      level: 1,\n      onNodeClick,\n      onNodeToggle,\n      onNodeLabelClick,\n      toggleOnNodeClick,\n    });\n  }\n\n  render() {\n    const {\n      className,\n      label,\n      children,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onNodeClick,\n      onNodeToggle,\n      onNodeLabelClick,\n      toggleOnNodeClick,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const treeClassNames = classnames(className, 'slds-tree-container');\n    return (\n      <div className={treeClassNames} role='application' {...props}>\n        {label ? <h4 className='slds-text-heading_label'>{label}</h4> : null}\n        <ul className='slds-tree' role='tree'>\n          {Children.map(children, this.renderTreeNode)}\n        </ul>\n      </div>\n    );\n  }\n}\n"],"file":"Tree.js"}