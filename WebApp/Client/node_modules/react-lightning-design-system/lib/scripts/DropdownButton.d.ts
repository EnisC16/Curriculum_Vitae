import React, { Component, CSSProperties, MouseEvent, KeyboardEvent, SyntheticEvent } from 'react';
import { ButtonProps } from './Button';
export declare type DropdownMenuAlign = 'left' | 'right';
export declare type DropdownMenuSize = 'small' | 'medium' | 'large';
export declare type Key = string | number;
export declare type DropdownButtonProps<EventKey extends Key> = {
    className?: string;
    label?: React.ReactNode;
    menuAlign?: DropdownMenuAlign;
    menuSize?: DropdownMenuSize;
    menuHeader?: string;
    nubbinTop?: boolean;
    hoverPopup?: boolean;
    grouped?: boolean;
    isFirstInGroup?: boolean;
    isLastInGroup?: boolean;
    menuStyle?: CSSProperties;
    onClick?: (e: SyntheticEvent<HTMLButtonElement>) => void;
    onBlur?: () => void;
    onMenuSelect?: (eventKey: EventKey) => void;
} & Omit<ButtonProps, 'onClick' | 'onBlur'>;
declare type DropdownButtonState = {
    opened: boolean;
};
export declare class DropdownButton<EventKey extends Key> extends Component<DropdownButtonProps<EventKey>, DropdownButtonState> {
    node: HTMLDivElement | null;
    trigger: HTMLButtonElement | null;
    dropdown: HTMLDivElement | null;
    constructor(props: Readonly<DropdownButtonProps<EventKey>>);
    onBlur: () => void;
    onKeyDown: (e: KeyboardEvent<HTMLButtonElement>) => void;
    onTriggerClick: (e: MouseEvent<HTMLButtonElement>) => void;
    onMenuSelect: (eventKey: EventKey) => void;
    onMenuClose: () => void;
    isFocusedInComponent(): boolean;
    focusToTargetItemEl(): void;
    renderButton({ grouped, isFirstInGroup, isLastInGroup, ...props }: any): JSX.Element;
    render(): JSX.Element;
}
export {};
