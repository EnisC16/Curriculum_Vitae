"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Tree = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Tree, _Component);

  var _super = _createSuper(Tree);

  function Tree(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Tree);
    _this = _super.call(this, props);
    _this.renderTreeNode = _this.renderTreeNode.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(Tree, [{
    key: "renderTreeNode",
    value: function renderTreeNode(tnode) {
      var _this$props = this.props,
          onNodeClick = _this$props.onNodeClick,
          onNodeToggle = _this$props.onNodeToggle,
          onNodeLabelClick = _this$props.onNodeLabelClick,
          toggleOnNodeClick = _this$props.toggleOnNodeClick;
      return /*#__PURE__*/(0, _react.cloneElement)(tnode, {
        level: 1,
        onNodeClick: onNodeClick,
        onNodeToggle: onNodeToggle,
        onNodeLabelClick: onNodeLabelClick,
        toggleOnNodeClick: toggleOnNodeClick
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          label = _this$props2.label,
          children = _this$props2.children,
          onNodeClick = _this$props2.onNodeClick,
          onNodeToggle = _this$props2.onNodeToggle,
          onNodeLabelClick = _this$props2.onNodeLabelClick,
          toggleOnNodeClick = _this$props2.toggleOnNodeClick,
          props = (0, _objectWithoutProperties2["default"])(_this$props2, ["className", "label", "children", "onNodeClick", "onNodeToggle", "onNodeLabelClick", "toggleOnNodeClick"]);
      var treeClassNames = (0, _classnames["default"])(className, 'slds-tree-container');
      return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
        className: treeClassNames,
        role: "application"
      }, props), label ? /*#__PURE__*/_react["default"].createElement("h4", {
        className: "slds-text-heading_label"
      }, label) : null, /*#__PURE__*/_react["default"].createElement("ul", {
        className: "slds-tree",
        role: "tree"
      }, _react.Children.map(children, this.renderTreeNode)));
    }
  }]);
  return Tree;
}(_react.Component);

exports.Tree = Tree;
//# sourceMappingURL=Tree.js.map