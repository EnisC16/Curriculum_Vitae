import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component, createContext } from 'react';
import classnames from 'classnames';
import { Icon } from './Icon';
import { autoAlign } from './AutoAlign';
export var DropdownMenuHeader = function DropdownMenuHeader(_ref) {
  var divider = _ref.divider,
      className = _ref.className,
      children = _ref.children;
  var menuHeaderClass = classnames('slds-dropdown__header', _defineProperty({}, "slds-has-divider_".concat(divider, "-space"), divider), className);
  return /*#__PURE__*/React.createElement("div", {
    className: menuHeaderClass
  }, /*#__PURE__*/React.createElement("span", {
    className: "slds-text-heading_label"
  }, children));
};
export var MenuHeader = DropdownMenuHeader;
export var DropdownMenuHandlerContext = /*#__PURE__*/createContext(null);

var DropdownMenuItemInner = /*#__PURE__*/function (_Component) {
  _inherits(DropdownMenuItemInner, _Component);

  var _super = _createSuper(DropdownMenuItemInner);

  function DropdownMenuItemInner() {
    var _this;

    _classCallCheck(this, DropdownMenuItemInner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (e) {
      if (e.keyCode === 13 || e.keyCode === 32) {
        // return or space
        e.preventDefault();
        e.stopPropagation();

        _this.onMenuItemClick(e);
      } else if (e.keyCode === 40 || e.keyCode === 38) {
        e.preventDefault();
        e.stopPropagation();
        var currentEl = e.currentTarget.parentElement;
        var itemEl = currentEl ? e.keyCode === 40 ? currentEl.nextSibling : currentEl.previousSibling : null;

        while (itemEl) {
          var anchorEl = itemEl.querySelector('.react-slds-menuitem[tabIndex]');

          if (anchorEl && !anchorEl.disabled) {
            anchorEl.focus();
            return;
          }

          itemEl = e.keyCode === 40 ? itemEl.nextSibling : itemEl.previousSibling;
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onMenuItemClick", function (e) {
      if (_this.props.onClick) {
        _this.props.onClick(e);
      }

      if (_this.props.eventKey != null) {
        _this.props.onMenuSelect(_this.props.eventKey);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onMenuItemBlur", function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }

      if (_this.props.onMenuBlur) {
        _this.props.onMenuBlur(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onMenuItemFocus", function (e) {
      if (_this.props.onFocus) {
        _this.props.onFocus(e);
      }

      if (_this.props.onMenuFocus) {
        _this.props.onMenuFocus(e);
      }
    });

    return _this;
  }

  _createClass(DropdownMenuItemInner, [{
    key: "render",
    value: function render() {
      /* eslint-disable @typescript-eslint/no-unused-vars */
      var _this$props = this.props,
          className = _this$props.className,
          label = _this$props.label,
          icon = _this$props.icon,
          iconRight = _this$props.iconRight,
          selected = _this$props.selected,
          disabled = _this$props.disabled,
          divider = _this$props.divider,
          _this$props$tabIndex = _this$props.tabIndex,
          tabIndex = _this$props$tabIndex === void 0 ? 0 : _this$props$tabIndex,
          eventKey = _this$props.eventKey,
          onClick = _this$props.onClick,
          onBlur = _this$props.onBlur,
          onFocus = _this$props.onFocus,
          onMenuSelect = _this$props.onMenuSelect,
          onMenuBlur = _this$props.onMenuBlur,
          onMenuFocus = _this$props.onMenuFocus,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, ["className", "label", "icon", "iconRight", "selected", "disabled", "divider", "tabIndex", "eventKey", "onClick", "onBlur", "onFocus", "onMenuSelect", "onMenuBlur", "onMenuFocus", "children"]);
      /* eslint-enable @typescript-eslint/no-unused-vars */


      var menuItemClass = classnames('slds-dropdown__item', _defineProperty({
        'slds-is-selected': selected
      }, "slds-has-divider_".concat(divider, "-space"), divider), className);
      return /*#__PURE__*/React.createElement("li", {
        className: menuItemClass
      }, /*#__PURE__*/React.createElement("a", _extends({
        role: "menuitem"
      }, props, {
        className: "slds-truncate react-slds-menuitem",
        "aria-disabled": disabled,
        tabIndex: disabled ? undefined : tabIndex,
        onClick: disabled ? undefined : this.onMenuItemClick,
        onBlur: disabled ? undefined : this.onMenuItemBlur,
        onFocus: disabled ? undefined : this.onMenuItemFocus,
        onKeyDown: disabled ? undefined : this.onKeyDown
      }), /*#__PURE__*/React.createElement("p", {
        className: "slds-truncate"
      }, icon ? /*#__PURE__*/React.createElement(Icon, {
        icon: icon,
        size: "x-small",
        align: "left"
      }) : null, label || children), iconRight ? /*#__PURE__*/React.createElement(Icon, {
        icon: iconRight,
        size: "x-small",
        align: "right"
      }) : null));
    }
  }]);

  return DropdownMenuItemInner;
}(Component);

export var DropdownMenuItem = function DropdownMenuItem(props) {
  return /*#__PURE__*/React.createElement(DropdownMenuHandlerContext.Consumer, null, function (handlers) {
    return /*#__PURE__*/React.createElement(DropdownMenuItemInner, _extends({}, props, handlers));
  });
};
export var MenuItem = DropdownMenuItem;

var DropdownMenuInner = /*#__PURE__*/function (_Component2) {
  _inherits(DropdownMenuInner, _Component2);

  var _super2 = _createSuper(DropdownMenuInner);

  function DropdownMenuInner() {
    var _this2;

    _classCallCheck(this, DropdownMenuInner);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this2 = _super2.call.apply(_super2, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this2), "node", null);

    _defineProperty(_assertThisInitialized(_this2), "handlers", null);

    _defineProperty(_assertThisInitialized(_this2), "onKeyDown", function (e) {
      if (e.keyCode === 27) {
        // ESC
        if (_this2.props.onMenuClose) {
          _this2.props.onMenuClose();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "onMenuSelect", function (eventKey) {
      if (_this2.props.onMenuSelect) {
        _this2.props.onMenuSelect(eventKey);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "onMenuFocus", function (e) {
      if (_this2.props.onFocus) {
        _this2.props.onFocus(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "onMenuBlur", function (e) {
      if (_this2.props.onBlur) {
        _this2.props.onBlur(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "getDropdownContext", function () {
      if (!_this2.handlers) {
        _this2.handlers = {
          onMenuSelect: _this2.onMenuSelect,
          onMenuBlur: _this2.onMenuBlur,
          onMenuFocus: _this2.onMenuFocus
        };
      }

      return _this2.handlers;
    });

    return _this2;
  }

  _createClass(DropdownMenuInner, [{
    key: "render",
    value: function render() {
      var _this3 = this;

      /* eslint-disable @typescript-eslint/no-unused-vars */
      var _this$props2 = this.props,
          className = _this$props2.className,
          alignment = _this$props2.alignment,
          size = _this$props2.size,
          header = _this$props2.header,
          nubbinTop = _this$props2.nubbinTop,
          hoverPopup = _this$props2.hoverPopup,
          children = _this$props2.children,
          style = _this$props2.style,
          dropdownMenuRef = _this$props2.dropdownMenuRef,
          onFocus = _this$props2.onFocus,
          onBlur = _this$props2.onBlur,
          onMenuSelect = _this$props2.onMenuSelect,
          onMenuClose = _this$props2.onMenuClose,
          rprops = _objectWithoutProperties(_this$props2, ["className", "alignment", "size", "header", "nubbinTop", "hoverPopup", "children", "style", "dropdownMenuRef", "onFocus", "onBlur", "onMenuSelect", "onMenuClose"]);
      /* eslint-enable @typescript-eslint/no-unused-vars */


      var nubbin = nubbinTop ? 'auto' : this.props.nubbin;

      var _alignment = _slicedToArray(alignment, 2),
          vertAlign = _alignment[0],
          align = _alignment[1];

      var nubbinPosition = nubbin === 'auto' ? "".concat(vertAlign, "-").concat(align) : nubbin;
      var dropdownClassNames = classnames(className, 'slds-dropdown', vertAlign ? "slds-dropdown_".concat(vertAlign) : undefined, align ? "slds-dropdown_".concat(align) : undefined, size ? "slds-dropdown_".concat(size) : undefined, nubbinPosition ? "slds-nubbin_".concat(nubbinPosition) : undefined, {
        'react-slds-no-hover-popup': !hoverPopup
      });

      var handleDOMRef = function handleDOMRef(node) {
        _this3.node = node;

        if (dropdownMenuRef) {
          dropdownMenuRef(node);
        }
      };

      return /*#__PURE__*/React.createElement("div", _extends({
        className: dropdownClassNames,
        ref: handleDOMRef,
        style: _objectSpread({
          outline: 'none'
        }, style),
        onKeyDown: this.onKeyDown,
        tabIndex: -1,
        onFocus: onFocus,
        onBlur: onBlur
      }, rprops), header ? /*#__PURE__*/React.createElement(MenuHeader, null, header) : null, /*#__PURE__*/React.createElement("ul", {
        className: "slds-dropdown__list",
        role: "menu"
      }, /*#__PURE__*/React.createElement(DropdownMenuHandlerContext.Provider, {
        value: this.getDropdownContext()
      }, children)));
    }
  }]);

  return DropdownMenuInner;
}(Component);

function preventPortalizeOnHoverPopup(Cmp) {
  return function (props) {
    return /*#__PURE__*/React.createElement(Cmp, _extends({
      preventPortalize: !!props.hoverPopup
    }, props));
  };
}

export var DropdownMenu = preventPortalizeOnHoverPopup(autoAlign({
  triggerSelector: '.slds-dropdown-trigger',
  alignmentStyle: 'menu'
})(DropdownMenuInner));
//# sourceMappingURL=DropdownMenu.js.map