import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import { FormElement } from './FormElement';
import { uuid } from './util';
export var Select = /*#__PURE__*/function (_Component) {
  _inherits(Select, _Component);

  var _super = _createSuper(Select);

  function Select(props) {
    var _this;

    _classCallCheck(this, Select);

    _this = _super.call(this, props);
    _this.state = {
      id: "form-element-".concat(uuid())
    };
    return _this;
  }

  _createClass(Select, [{
    key: "render",
    value: function render() {
      var id = this.props.id || this.state.id;

      var _this$props = this.props,
          label = _this$props.label,
          required = _this$props.required,
          error = _this$props.error,
          totalCols = _this$props.totalCols,
          cols = _this$props.cols,
          props = _objectWithoutProperties(_this$props, ["label", "required", "error", "totalCols", "cols"]);

      if (label || required || error || totalCols || cols) {
        var formElemProps = {
          id: id,
          label: label,
          required: required,
          error: error,
          totalCols: totalCols,
          cols: cols
        };
        return /*#__PURE__*/React.createElement(FormElement, formElemProps, /*#__PURE__*/React.createElement(Select, _objectSpread(_objectSpread({}, props), {}, {
          id: id
        })));
      }

      var className = props.className,
          children = props.children,
          rprops = _objectWithoutProperties(props, ["className", "children"]);

      var selectClassNames = classnames(className, 'slds-select');
      return /*#__PURE__*/React.createElement("select", _extends({
        id: id,
        className: selectClassNames
      }, rprops), children);
    }
  }]);

  return Select;
}(Component);

_defineProperty(Select, "isFormElement", true);

export var Option = function Option(props) {
  var label = props.label,
      children = props.children,
      pprops = _objectWithoutProperties(props, ["label", "children"]);

  return /*#__PURE__*/React.createElement("option", pprops, label || children);
};
//# sourceMappingURL=Select.js.map