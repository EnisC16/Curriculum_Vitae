import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import PropTypes from 'prop-types';

/**
 *
 */
export var ComponentSettings = /*#__PURE__*/function (_React$Component) {
  _inherits(ComponentSettings, _React$Component);

  var _super = _createSuper(ComponentSettings);

  function ComponentSettings() {
    _classCallCheck(this, ComponentSettings);

    return _super.apply(this, arguments);
  }

  _createClass(ComponentSettings, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _this$props = this.props,
          assetRoot = _this$props.assetRoot,
          portalClassName = _this$props.portalClassName,
          portalStyle = _this$props.portalStyle;
      return {
        assetRoot: assetRoot,
        portalClassName: portalClassName,
        portalStyle: portalStyle
      };
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return ComponentSettings;
}(React.Component);

_defineProperty(ComponentSettings, "childContextTypes", {
  assetRoot: PropTypes.string,
  portalClassName: PropTypes.string,
  portalStyle: PropTypes.object // eslint-disable-line react/forbid-prop-types

});
//# sourceMappingURL=ComponentSettings.js.map