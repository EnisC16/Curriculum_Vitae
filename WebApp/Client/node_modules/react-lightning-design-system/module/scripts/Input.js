import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import keycoder from 'keycoder';
import { Icon } from './Icon';
import { FormElement } from './FormElement';
import { Text } from './Text';
import { uuid, registerStyle } from './util';
export var Input = /*#__PURE__*/function (_Component) {
  _inherits(Input, _Component);

  var _super = _createSuper(Input);

  function Input(props) {
    var _this;

    _classCallCheck(this, Input);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onValueChange = _this$props.onValueChange;

      if (onChange) {
        onChange(e);
      }

      if (onValueChange) {
        onValueChange(e.target.value);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (e) {
      var _this$props2 = _this.props,
          symbolPattern = _this$props2.symbolPattern,
          onKeyDown = _this$props2.onKeyDown;

      if (symbolPattern) {
        var keyCode = e.keyCode,
            shiftKey = e.shiftKey;

        var _value = keycoder.toCharacter(keyCode, shiftKey);

        if (_value && !_value.match(new RegExp(symbolPattern))) {
          e.preventDefault();
          return;
        }
      }

      if (onKeyDown) {
        onKeyDown(e);
      }
    });

    _this.registerIconStyle();

    return _this;
  }

  _createClass(Input, [{
    key: "registerIconStyle",
    value: function registerIconStyle() {
      registerStyle('input-icons', [// fix styles of double-iconed input
      ['.slds-input-has-icon_left-right .slds-input__icon_right', '{ left: auto; }']]);
    }
  }, {
    key: "renderAddon",
    value: function renderAddon(content) {
      return /*#__PURE__*/React.createElement(Text, {
        tag: "span",
        className: "slds-form-element__addon",
        category: "body",
        type: "regular"
      }, content);
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(icon, align) {
      return /*#__PURE__*/React.isValidElement(icon) ? icon : /*#__PURE__*/React.createElement(Icon, {
        icon: icon,
        className: classnames('slds-input__icon', "slds-input__icon_".concat(align), 'slds-icon-text-default')
      });
    }
  }, {
    key: "renderInput",
    value: function renderInput(props) {
      var id = props.id,
          readOnly = props.readOnly,
          className = props.className,
          inputRef = props.inputRef,
          type = props.type,
          bare = props.bare,
          value = props.value,
          defaultValue = props.defaultValue,
          htmlReadOnly = props.htmlReadOnly,
          pprops = _objectWithoutProperties(props, ["id", "readOnly", "className", "inputRef", "type", "bare", "value", "defaultValue", "htmlReadOnly"]);

      var inputClassNames = classnames(className, bare ? 'slds-input_bare' : 'slds-input');
      return readOnly ? /*#__PURE__*/React.createElement(Text, {
        type: "regular",
        category: "body",
        className: "slds-form-element__static",
        id: id
      }, value) : /*#__PURE__*/React.createElement("input", _extends({
        ref: inputRef,
        className: inputClassNames,
        id: id,
        type: type,
        value: value,
        defaultValue: defaultValue,
        readOnly: htmlReadOnly
      }, pprops, {
        onChange: this.onChange,
        onKeyDown: this.onKeyDown
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          _this$props3$id = _this$props3.id,
          id = _this$props3$id === void 0 ? "input-".concat(uuid()) : _this$props3$id,
          label = _this$props3.label,
          required = _this$props3.required,
          error = _this$props3.error,
          readOnly = _this$props3.readOnly,
          totalCols = _this$props3.totalCols,
          cols = _this$props3.cols,
          props = _objectWithoutProperties(_this$props3, ["id", "label", "required", "error", "readOnly", "totalCols", "cols"]);

      if (label || required || error || totalCols || cols) {
        var formElemProps = {
          id: id,
          label: label,
          required: required,
          error: error,
          readOnly: readOnly,
          totalCols: totalCols,
          cols: cols
        };
        return /*#__PURE__*/React.createElement(FormElement, formElemProps, /*#__PURE__*/React.createElement(Input, _objectSpread({
          id: id,
          readOnly: readOnly
        }, props)));
      }

      var iconLeft = props.iconLeft,
          iconRight = props.iconRight,
          addonLeft = props.addonLeft,
          addonRight = props.addonRight,
          pprops = _objectWithoutProperties(props, ["iconLeft", "iconRight", "addonLeft", "addonRight"]);

      var inputProps = _objectSpread(_objectSpread({}, pprops), {}, {
        id: id,
        readOnly: readOnly
      });

      if (iconLeft || iconRight || addonLeft || addonRight) {
        var wrapperClassName = classnames('slds-form-element__control', {
          'slds-input-has-icon': iconLeft || iconRight
        }, {
          'slds-input-has-icon_left-right': iconLeft && iconRight
        }, {
          'slds-input-has-icon_left': iconLeft
        }, {
          'slds-input-has-icon_right': iconRight
        }, {
          'slds-input-has-fixed-addon': addonLeft || addonRight
        });
        return /*#__PURE__*/React.createElement("div", {
          className: wrapperClassName
        }, addonLeft ? this.renderAddon(addonLeft) : undefined, iconLeft ? this.renderIcon(iconLeft, 'left') : undefined, this.renderInput(inputProps), iconRight ? this.renderIcon(iconRight, 'right') : undefined, addonRight ? this.renderAddon(addonRight) : undefined);
      }

      return this.renderInput(inputProps);
    }
  }]);

  return Input;
}(Component);

_defineProperty(Input, "isFormElement", true);
//# sourceMappingURL=Input.js.map