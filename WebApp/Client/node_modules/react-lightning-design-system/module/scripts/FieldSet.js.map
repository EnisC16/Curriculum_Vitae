{"version":3,"sources":["../../src/scripts/FieldSet.tsx"],"names":["React","Component","classnames","FormElement","uuid","FieldSet","className","label","children","props","fsClassNames","isFormElement","FieldSetRow","totalCols","child","type","id","formElemProps","cols","cloneElement","Children","count","rowClassNames","map","renderChild","bind"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;AAMA,OAAO,SAASC,QAAT,OAKW;AAAA,MAJhBC,SAIgB,QAJhBA,SAIgB;AAAA,MAHhBC,KAGgB,QAHhBA,KAGgB;AAAA,MAFhBC,QAEgB,QAFhBA,QAEgB;AAAA,MADbC,KACa;;AAChB,MAAMC,YAAY,GAAGR,UAAU,CAACI,SAAD,EAAY,oBAAZ,CAA/B;AACA,sBACE;AAAU,IAAA,SAAS,EAAEI;AAArB,KAAuCD,KAAvC,GACGF,KAAK,gBACJ;AAAQ,IAAA,SAAS,EAAC;AAAlB,KAA8CA,KAA9C,CADI,GAEF,IAHN,eAIE;AAAK,IAAA,SAAS,EAAC;AAAf,KAAsCC,QAAtC,CAJF,CADF;AAQD;AAEDH,QAAQ,CAACM,aAAT,GAAyB,IAAzB;AAOA,WAAaC,WAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,gCAGcC,SAHd,EAGiCC,KAHjC,EAG6C;AACzC,UAAIA,KAAK,IAAI,CAACA,KAAK,CAACC,IAAN,CAAWJ,aAAzB,EAAwC;AAAA,8BACIG,KAAK,CAACL,KADV,CAC9BO,EAD8B;AAAA,YAC9BA,EAD8B,uDACTZ,IAAI,EADK;AAEtC,YAAMa,aAAa,GAAG;AAAED,UAAAA,EAAE,EAAFA,EAAF;AAAMH,UAAAA,SAAS,EAATA,SAAN;AAAiBK,UAAAA,IAAI,EAAE;AAAvB,SAAtB;AACA,4BACE,oBAAC,WAAD,EAAiBD,aAAjB,eACGjB,KAAK,CAACmB,YAAN,CAAmBL,KAAnB,EAA0B;AAAEE,UAAAA,EAAE,EAAFA;AAAF,SAA1B,CADH,CADF;AAKD;;AACD,0BAAOhB,KAAK,CAACmB,YAAN,CAAmBL,KAAnB,EAA0B;AAAED,QAAAA,SAAS,EAATA;AAAF,OAA1B,CAAP;AACD;AAdH;AAAA;AAAA,6BAgBW;AAAA,wBAC+B,KAAKJ,KADpC;AAAA,UACCH,SADD,eACCA,SADD;AAAA,UACYY,IADZ,eACYA,IADZ;AAAA,UACkBV,QADlB,eACkBA,QADlB;AAEP,UAAMK,SAAS,GAAGK,IAAI,IAAIlB,KAAK,CAACoB,QAAN,CAAeC,KAAf,CAAqBb,QAArB,CAA1B;AACA,UAAMc,aAAa,GAAGpB,UAAU,CAACI,SAAD,EAAY,wBAAZ,CAAhC;AACA,0BACE;AAAK,QAAA,SAAS,EAAEgB;AAAhB,SACGtB,KAAK,CAACoB,QAAN,CAAeG,GAAf,CAAmBf,QAAnB,EAA6B,KAAKgB,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,EAA4BZ,SAA5B,CAA7B,CADH,CADF;AAKD;AAzBH;;AAAA;AAAA,EAAiCZ,SAAjC,E,CA4BA;;gBA5BaW,W,mBACY,I","sourcesContent":["import React, { Component, HTMLAttributes } from 'react';\nimport classnames from 'classnames';\nimport { FormElement } from './FormElement';\nimport { uuid } from './util';\n\nexport type FieldSetProps = {\n  label?: string;\n} & HTMLAttributes<HTMLFieldSetElement>;\n\nexport function FieldSet({\n  className,\n  label,\n  children,\n  ...props\n}: FieldSetProps) {\n  const fsClassNames = classnames(className, 'slds-form_compound');\n  return (\n    <fieldset className={fsClassNames} {...props}>\n      {label ? (\n        <legend className='slds-form-element__label'>{label}</legend>\n      ) : null}\n      <div className='form-element__group'>{children}</div>\n    </fieldset>\n  );\n}\n\nFieldSet.isFormElement = true;\n\ntype FieldSetRowProps = {\n  className?: string;\n  cols?: number;\n};\n\nexport class FieldSetRow extends Component<FieldSetRowProps> {\n  static isFormElement = true;\n\n  renderChild(totalCols: number, child: any) {\n    if (child && !child.type.isFormElement) {\n      const { id = `form-element-${uuid()}` } = child.props;\n      const formElemProps = { id, totalCols, cols: 1 };\n      return (\n        <FormElement {...formElemProps}>\n          {React.cloneElement(child, { id })}\n        </FormElement>\n      );\n    }\n    return React.cloneElement(child, { totalCols });\n  }\n\n  render() {\n    const { className, cols, children } = this.props;\n    const totalCols = cols || React.Children.count(children);\n    const rowClassNames = classnames(className, 'slds-form-element__row');\n    return (\n      <div className={rowClassNames}>\n        {React.Children.map(children, this.renderChild.bind(this, totalCols))}\n      </div>\n    );\n  }\n}\n\n// FieldSet.Row = FieldSetRow;\n"],"file":"FieldSet.js"}