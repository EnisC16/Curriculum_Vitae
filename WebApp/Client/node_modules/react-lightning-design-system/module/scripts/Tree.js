import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component, Children, cloneElement } from 'react';
import classnames from 'classnames';
export var Tree = /*#__PURE__*/function (_Component) {
  _inherits(Tree, _Component);

  var _super = _createSuper(Tree);

  function Tree(props) {
    var _this;

    _classCallCheck(this, Tree);

    _this = _super.call(this, props);
    _this.renderTreeNode = _this.renderTreeNode.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Tree, [{
    key: "renderTreeNode",
    value: function renderTreeNode(tnode) {
      var _this$props = this.props,
          onNodeClick = _this$props.onNodeClick,
          onNodeToggle = _this$props.onNodeToggle,
          onNodeLabelClick = _this$props.onNodeLabelClick,
          toggleOnNodeClick = _this$props.toggleOnNodeClick;
      return /*#__PURE__*/cloneElement(tnode, {
        level: 1,
        onNodeClick: onNodeClick,
        onNodeToggle: onNodeToggle,
        onNodeLabelClick: onNodeLabelClick,
        toggleOnNodeClick: toggleOnNodeClick
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          label = _this$props2.label,
          children = _this$props2.children,
          onNodeClick = _this$props2.onNodeClick,
          onNodeToggle = _this$props2.onNodeToggle,
          onNodeLabelClick = _this$props2.onNodeLabelClick,
          toggleOnNodeClick = _this$props2.toggleOnNodeClick,
          props = _objectWithoutProperties(_this$props2, ["className", "label", "children", "onNodeClick", "onNodeToggle", "onNodeLabelClick", "toggleOnNodeClick"]);

      var treeClassNames = classnames(className, 'slds-tree-container');
      return /*#__PURE__*/React.createElement("div", _extends({
        className: treeClassNames,
        role: "application"
      }, props), label ? /*#__PURE__*/React.createElement("h4", {
        className: "slds-text-heading_label"
      }, label) : null, /*#__PURE__*/React.createElement("ul", {
        className: "slds-tree",
        role: "tree"
      }, Children.map(children, this.renderTreeNode)));
    }
  }]);

  return Tree;
}(Component);
//# sourceMappingURL=Tree.js.map