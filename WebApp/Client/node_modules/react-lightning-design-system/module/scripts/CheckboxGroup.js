import _extends from "@babel/runtime/helpers/extends";
import _typeof from "@babel/runtime/helpers/typeof";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import classnames from 'classnames';
export var CheckboxGroup = /*#__PURE__*/function (_React$Component) {
  _inherits(CheckboxGroup, _React$Component);

  var _super = _createSuper(CheckboxGroup);

  function CheckboxGroup(props) {
    var _this;

    _classCallCheck(this, CheckboxGroup);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "nodes", {});

    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    _this.renderControl = _this.renderControl.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: "onChange",
    value: function onChange(e) {
      var _this2 = this;

      if (this.props.onValueChange) {
        var _values = [];
        React.Children.forEach(this.props.children, function (check, i) {
          var el = check.props.ref || _this2.nodes["check".concat(i + 1)];

          var checkEl = el && el.querySelector('input[type=checkbox]');

          if (checkEl && checkEl.checked) {
            _values.push(check.props.value);
          }
        });
        this.props.onValueChange(_values);
      }

      if (this.props.onChange) {
        this.props.onChange(e);
      }
    }
  }, {
    key: "renderControl",
    value: function renderControl(checkbox, i) {
      var _this3 = this;

      var props = {
        grouped: true
      };

      if (checkbox.props.ref) {
        props.ref = checkbox.props.ref;
      } else {
        props.checkboxRef = function (node) {
          return _this3.nodes["check".concat(i + 1)] = node;
        };
      }

      if (this.props.name) {
        props.name = this.props.name;
      }

      return /*#__PURE__*/React.cloneElement(checkbox, props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          label = _this$props.label,
          totalCols = _this$props.totalCols,
          cols = _this$props.cols,
          style = _this$props.style,
          required = _this$props.required,
          error = _this$props.error,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, ["className", "label", "totalCols", "cols", "style", "required", "error", "children"]);

      var grpClassNames = classnames(className, 'slds-form-element', {
        'slds-has-error': error,
        'slds-is-required': required
      }, typeof totalCols === 'number' ? "slds-size_".concat(cols || 1, "-of-").concat(totalCols) : null);
      var grpStyles = typeof totalCols === 'number' ? _objectSpread({
        display: 'inline-block'
      }, style) : style;
      var errorMessage = error ? typeof error === 'string' ? error : _typeof(error) === 'object' ? error.message : undefined : undefined;
      delete props.onChange;
      return /*#__PURE__*/React.createElement("fieldset", _extends({
        className: grpClassNames,
        style: grpStyles,
        onChange: this.onChange
      }, props), /*#__PURE__*/React.createElement("legend", {
        className: "slds-form-element__label"
      }, label, required ? /*#__PURE__*/React.createElement("abbr", {
        className: "slds-required"
      }, "*") : undefined), /*#__PURE__*/React.createElement("div", {
        className: "slds-form-element__control"
      }, React.Children.map(children, this.renderControl), errorMessage ? /*#__PURE__*/React.createElement("div", {
        className: "slds-form-element__help"
      }, errorMessage) : undefined));
    }
  }]);

  return CheckboxGroup;
}(React.Component);

_defineProperty(CheckboxGroup, "isFormElement", true);
//# sourceMappingURL=CheckboxGroup.js.map