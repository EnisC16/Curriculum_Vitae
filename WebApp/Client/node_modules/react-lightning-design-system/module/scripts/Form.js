import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import { FormElement } from './FormElement';
import { uuid } from './util';
export var Form = /*#__PURE__*/function (_Component) {
  _inherits(Form, _Component);

  var _super = _createSuper(Form);

  function Form(props) {
    var _this;

    _classCallCheck(this, Form);

    _this = _super.call(this, props);
    _this.renderFormElement = _this.renderFormElement.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Form, [{
    key: "renderFormElement",
    value: function renderFormElement(element) {
      if (element && !element.type.isFormElement) {
        var _element$props$id = element.props.id,
            id = _element$props$id === void 0 ? "form-element-".concat(uuid()) : _element$props$id;
        var formElemProps = {
          id: id
        };
        return /*#__PURE__*/React.createElement(FormElement, formElemProps, /*#__PURE__*/React.cloneElement(element, {
          id: id
        }));
      }

      return element;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          type = _this$props.type,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, ["className", "type", "children"]);

      var formClassNames = classnames(className, "slds-form_".concat(type));
      return /*#__PURE__*/React.createElement("form", _extends({
        className: formClassNames
      }, props), React.Children.map(children, this.renderFormElement));
    }
  }]);

  return Form;
}(Component);

_defineProperty(Form, "defaultProps", {
  type: 'stacked'
});
//# sourceMappingURL=Form.js.map