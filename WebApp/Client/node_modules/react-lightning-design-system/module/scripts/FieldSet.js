import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import { FormElement } from './FormElement';
import { uuid } from './util';
export function FieldSet(_ref) {
  var className = _ref.className,
      label = _ref.label,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["className", "label", "children"]);

  var fsClassNames = classnames(className, 'slds-form_compound');
  return /*#__PURE__*/React.createElement("fieldset", _extends({
    className: fsClassNames
  }, props), label ? /*#__PURE__*/React.createElement("legend", {
    className: "slds-form-element__label"
  }, label) : null, /*#__PURE__*/React.createElement("div", {
    className: "form-element__group"
  }, children));
}
FieldSet.isFormElement = true;
export var FieldSetRow = /*#__PURE__*/function (_Component) {
  _inherits(FieldSetRow, _Component);

  var _super = _createSuper(FieldSetRow);

  function FieldSetRow() {
    _classCallCheck(this, FieldSetRow);

    return _super.apply(this, arguments);
  }

  _createClass(FieldSetRow, [{
    key: "renderChild",
    value: function renderChild(totalCols, child) {
      if (child && !child.type.isFormElement) {
        var _child$props$id = child.props.id,
            id = _child$props$id === void 0 ? "form-element-".concat(uuid()) : _child$props$id;
        var formElemProps = {
          id: id,
          totalCols: totalCols,
          cols: 1
        };
        return /*#__PURE__*/React.createElement(FormElement, formElemProps, /*#__PURE__*/React.cloneElement(child, {
          id: id
        }));
      }

      return /*#__PURE__*/React.cloneElement(child, {
        totalCols: totalCols
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          cols = _this$props.cols,
          children = _this$props.children;
      var totalCols = cols || React.Children.count(children);
      var rowClassNames = classnames(className, 'slds-form-element__row');
      return /*#__PURE__*/React.createElement("div", {
        className: rowClassNames
      }, React.Children.map(children, this.renderChild.bind(this, totalCols)));
    }
  }]);

  return FieldSetRow;
}(Component); // FieldSet.Row = FieldSetRow;

_defineProperty(FieldSetRow, "isFormElement", true);
//# sourceMappingURL=FieldSet.js.map