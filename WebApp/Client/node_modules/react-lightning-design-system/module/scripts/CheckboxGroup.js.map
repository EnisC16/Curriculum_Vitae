{"version":3,"sources":["../../src/scripts/CheckboxGroup.tsx"],"names":["React","classnames","CheckboxGroup","props","onChange","bind","renderControl","e","onValueChange","values","Children","forEach","children","check","i","el","ref","nodes","checkEl","querySelector","checked","push","value","checkbox","grouped","checkboxRef","node","name","cloneElement","className","label","totalCols","cols","style","required","error","grpClassNames","grpStyles","display","errorMessage","message","undefined","map","Component"],"mappings":"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","sourcesContent":["import React, { FieldsetHTMLAttributes } from 'react';\nimport classnames from 'classnames';\nimport { FormElementProps } from './FormElement';\n\nexport type CheckboxGroupProps<ValueType extends string | number> = {\n  label?: string;\n  required?: boolean;\n  error?: FormElementProps['error'];\n  name?: string;\n  totalCols?: number;\n  cols?: number;\n  onValueChange?: (values: ValueType[]) => void;\n} & FieldsetHTMLAttributes<HTMLFieldSetElement>;\n\nexport class CheckboxGroup<\n  ValueType extends string | number\n> extends React.Component<CheckboxGroupProps<ValueType>> {\n  static isFormElement = true;\n\n  private nodes: { [key: string]: any } = {};\n\n  constructor(props: Readonly<CheckboxGroupProps<ValueType>>) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n    this.renderControl = this.renderControl.bind(this);\n  }\n\n  onChange(e: React.FormEvent<HTMLFieldSetElement>) {\n    if (this.props.onValueChange) {\n      const values: ValueType[] = [];\n      React.Children.forEach(this.props.children, (check: any, i) => {\n        const el = check.props.ref || this.nodes[`check${i + 1}`];\n        const checkEl = el && el.querySelector('input[type=checkbox]');\n        if (checkEl && checkEl.checked) {\n          values.push(check.props.value);\n        }\n      });\n      this.props.onValueChange(values);\n    }\n    if (this.props.onChange) {\n      this.props.onChange(e);\n    }\n  }\n\n  renderControl(checkbox: any, i: number) {\n    const props: any = { grouped: true };\n    if (checkbox.props.ref) {\n      props.ref = checkbox.props.ref;\n    } else {\n      props.checkboxRef = (node: any) => (this.nodes[`check${i + 1}`] = node);\n    }\n    if (this.props.name) {\n      props.name = this.props.name;\n    }\n    return React.cloneElement(checkbox, props);\n  }\n\n  render() {\n    const {\n      className,\n      label,\n      totalCols,\n      cols,\n      style,\n      required,\n      error,\n      children,\n      ...props\n    } = this.props;\n    const grpClassNames = classnames(\n      className,\n      'slds-form-element',\n      {\n        'slds-has-error': error,\n        'slds-is-required': required,\n      },\n      typeof totalCols === 'number'\n        ? `slds-size_${cols || 1}-of-${totalCols}`\n        : null\n    );\n    const grpStyles =\n      typeof totalCols === 'number'\n        ? { display: 'inline-block', ...style }\n        : style;\n    const errorMessage = error\n      ? typeof error === 'string'\n        ? error\n        : typeof error === 'object'\n        ? error.message\n        : undefined\n      : undefined;\n\n    delete props.onChange;\n    return (\n      <fieldset\n        className={grpClassNames}\n        style={grpStyles}\n        onChange={this.onChange}\n        {...props}\n      >\n        <legend className='slds-form-element__label'>\n          {label}\n          {required ? <abbr className='slds-required'>*</abbr> : undefined}\n        </legend>\n        <div className='slds-form-element__control'>\n          {React.Children.map(children, this.renderControl)}\n          {errorMessage ? (\n            <div className='slds-form-element__help'>{errorMessage}</div>\n          ) : (\n            undefined\n          )}\n        </div>\n      </fieldset>\n    );\n  }\n}\n"],"file":"CheckboxGroup.js"}