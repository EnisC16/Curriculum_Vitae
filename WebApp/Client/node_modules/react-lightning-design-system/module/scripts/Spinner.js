import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import classnames from 'classnames';
import { registerStyle } from './util';
export var Spinner = /*#__PURE__*/function (_React$Component) {
  _inherits(Spinner, _React$Component);

  var _super = _createSuper(Spinner);

  function Spinner(props) {
    var _this;

    _classCallCheck(this, Spinner);

    _this = _super.call(this, props);
    registerStyle('spinner-overlay', [['body .slds .slds-spinner_container', '{ z-index: 9002 }']]);
    return _this;
  }

  _createClass(Spinner, [{
    key: "renderSpinner",
    value: function renderSpinner(props) {
      var className = props.className,
          size = props.size,
          type = props.type,
          pprops = _objectWithoutProperties(props, ["className", "size", "type"]);

      var spinnerClassNames = classnames(className, 'slds-spinner', "slds-spinner_".concat(size), type ? "slds-spinner_".concat(type) : null);
      return /*#__PURE__*/React.createElement("div", _extends({
        className: spinnerClassNames,
        "aria-hidden": "false",
        role: "alert"
      }, pprops), /*#__PURE__*/React.createElement("div", {
        className: "slds-spinner__dot-a"
      }), /*#__PURE__*/React.createElement("div", {
        className: "slds-spinner__dot-b"
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$container = _this$props.container,
          container = _this$props$container === void 0 ? true : _this$props$container,
          _this$props$size = _this$props.size,
          size = _this$props$size === void 0 ? 'small' : _this$props$size,
          props = _objectWithoutProperties(_this$props, ["container", "size"]);

      return container ? /*#__PURE__*/React.createElement("div", {
        className: "slds-spinner_container"
      }, this.renderSpinner(_objectSpread({
        size: size
      }, props))) : this.renderSpinner(_objectSpread({
        size: size
      }, props));
    }
  }]);

  return Spinner;
}(React.Component);
//# sourceMappingURL=Spinner.js.map