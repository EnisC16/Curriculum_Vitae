import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import { Icon } from './Icon';
import { Spinner } from './Spinner';
var ICON_SIZES = ['x-small', 'small', 'medium', 'large'];
var ICON_ALIGNS = ['left', 'right'];
export var Button = /*#__PURE__*/function (_Component) {
  _inherits(Button, _Component);

  var _super = _createSuper(Button);

  function Button(props) {
    var _this;

    _classCallCheck(this, Button);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "node", null);

    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Button, [{
    key: "onClick",
    value: function onClick(e) {
      if (this.node !== null) {
        // Safari, FF to trigger focus event on click
        this.node.focus();
      }

      var onClick = this.props.onClick;
      if (onClick) onClick(e);
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(iconSize, inv) {
      var _this$props = this.props,
          icon = _this$props.icon,
          iconAlign = _this$props.iconAlign,
          type = _this$props.type;
      var inverse = inv || /-?inverse$/.test(type || '');
      return /*#__PURE__*/React.createElement(ButtonIcon, {
        icon: icon,
        align: iconAlign,
        size: iconSize,
        inverse: inverse
      });
    }
  }, {
    key: "renderIconMore",
    value: function renderIconMore() {
      var _this$props2 = this.props,
          iconMore = _this$props2.iconMore,
          icon = _this$props2.icon,
          iconAlign = _this$props2.iconAlign,
          label = _this$props2.label,
          children = _this$props2.children;
      var adjoining = icon && (iconAlign === 'right' || !(label || children));
      var iconMoreSize = this.props.iconMoreSize || adjoining ? 'x-small' : 'small';
      return /*#__PURE__*/React.createElement(ButtonIcon, {
        icon: iconMore,
        align: "right",
        size: iconMoreSize
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          className = _this$props3.className,
          type = _this$props3.type,
          size = _this$props3.size,
          icon = _this$props3.icon,
          iconAlign = _this$props3.iconAlign,
          iconMore = _this$props3.iconMore,
          selected = _this$props3.selected,
          alt = _this$props3.alt,
          label = _this$props3.label,
          loading = _this$props3.loading,
          iconSize = _this$props3.iconSize,
          inverse = _this$props3.inverse,
          _this$props3$htmlType = _this$props3.htmlType,
          htmlType = _this$props3$htmlType === void 0 ? 'button' : _this$props3$htmlType,
          children = _this$props3.children,
          buttonRef = _this$props3.buttonRef,
          props = _objectWithoutProperties(_this$props3, ["className", "type", "size", "icon", "iconAlign", "iconMore", "selected", "alt", "label", "loading", "iconSize", "inverse", "htmlType", "children", "buttonRef"]);

      var typeClassName = type ? "slds-button_".concat(type) : null;
      var btnClassNames = classnames(className, 'slds-button', typeClassName, _defineProperty({
        'slds-is-selected': selected
      }, "slds-button_icon-".concat(size), /^(x-small|small)$/.test(size || '') && /^icon-/.test(type || '')));
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react/button-has-type
        React.createElement("button", _extends({
          ref: function ref(node) {
            _this2.node = node;
            if (buttonRef) buttonRef(node);
          },
          className: btnClassNames,
          type: htmlType
        }, props, {
          onClick: this.onClick
        }), icon && iconAlign !== 'right' ? this.renderIcon(iconSize, inverse) : null, children || label, icon && iconAlign === 'right' ? this.renderIcon(iconSize, inverse) : null, iconMore ? this.renderIconMore() : null, alt ? /*#__PURE__*/React.createElement("span", {
          className: "slds-assistive-text"
        }, alt) : null, loading ? /*#__PURE__*/React.createElement(Spinner, null) : null)
      );
    }
  }]);

  return Button;
}(Component);
export var ButtonIcon = function ButtonIcon(_ref) {
  var icon = _ref.icon,
      align = _ref.align,
      size = _ref.size,
      inverse = _ref.inverse,
      className = _ref.className,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, ["icon", "align", "size", "inverse", "className", "style"]);

  var alignClassName = align && ICON_ALIGNS.indexOf(align) >= 0 ? "slds-button__icon_".concat(align) : null;
  var sizeClassName = size && ICON_SIZES.indexOf(size) >= 0 ? "slds-button__icon_".concat(size) : null;
  var inverseClassName = inverse ? 'slds-button__icon_inverse' : null;
  var iconClassNames = classnames('slds-button__icon', alignClassName, sizeClassName, inverseClassName, className);
  return /*#__PURE__*/React.createElement(Icon, _extends({
    className: iconClassNames,
    icon: icon,
    textColor: null,
    pointerEvents: "none",
    style: style
  }, props));
};
//# sourceMappingURL=Button.js.map