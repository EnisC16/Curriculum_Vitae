import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component, Children } from 'react';
import classnames from 'classnames';
import { DropdownButton } from './DropdownButton';
export var ButtonGroup = /*#__PURE__*/function (_Component) {
  _inherits(ButtonGroup, _Component);

  var _super = _createSuper(ButtonGroup);

  function ButtonGroup(props) {
    var _this;

    _classCallCheck(this, ButtonGroup);

    _this = _super.call(this, props);
    _this.renderButton = _this.renderButton.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ButtonGroup, [{
    key: "renderButton",
    value: function renderButton(button, index) {
      var cnt = React.Children.count(this.props.children);

      if (button.type && (button.type === DropdownButton || button.type.isGroupable)) {
        return /*#__PURE__*/React.cloneElement(button, {
          key: index,
          grouped: true,
          isFirstInGroup: index === 0,
          isLastInGroup: index === cnt - 1
        });
      }

      return button;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, ["className", "children"]);

      var btnGrpClassNames = classnames(className, 'slds-button-group');
      return /*#__PURE__*/React.createElement("div", _extends({
        className: btnGrpClassNames,
        role: "group"
      }, props), Children.map(children, this.renderButton));
    }
  }]);

  return ButtonGroup;
}(Component);
//# sourceMappingURL=ButtonGroup.js.map