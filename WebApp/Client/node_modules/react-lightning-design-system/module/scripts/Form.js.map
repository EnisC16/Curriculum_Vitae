{"version":3,"sources":["../../src/scripts/Form.tsx"],"names":["React","Component","classnames","FormElement","uuid","Form","props","renderFormElement","bind","element","type","isFormElement","id","formElemProps","cloneElement","className","children","formClassNames","Children","map"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAqD,OAArD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;AAMA,WAAaC,IAAb;AAAA;;AAAA;;AAKE,gBAAYC,KAAZ,EAAwC;AAAA;;AAAA;;AACtC,8BAAMA,KAAN;AAEA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,+BAAzB;AAHsC;AAIvC;;AATH;AAAA;AAAA,sCAWoBC,OAXpB,EAWkC;AAC9B,UAAIA,OAAO,IAAI,CAACA,OAAO,CAACC,IAAR,CAAaC,aAA7B,EAA4C;AAAA,gCACAF,OAAO,CAACH,KADR,CAClCM,EADkC;AAAA,YAClCA,EADkC,yDACbR,IAAI,EADS;AAE1C,YAAMS,aAAa,GAAG;AAAED,UAAAA,EAAE,EAAFA;AAAF,SAAtB;AACA,4BACE,oBAAC,WAAD,EAAiBC,aAAjB,eACGb,KAAK,CAACc,YAAN,CAAmBL,OAAnB,EAA4B;AAAEG,UAAAA,EAAE,EAAFA;AAAF,SAA5B,CADH,CADF;AAKD;;AACD,aAAOH,OAAP;AACD;AAtBH;AAAA;AAAA,6BAwBW;AAAA,wBACyC,KAAKH,KAD9C;AAAA,UACCS,SADD,eACCA,SADD;AAAA,UACYL,IADZ,eACYA,IADZ;AAAA,UACkBM,QADlB,eACkBA,QADlB;AAAA,UAC+BV,KAD/B;;AAEP,UAAMW,cAAc,GAAGf,UAAU,CAACa,SAAD,sBAAyBL,IAAzB,EAAjC;AACA,0BACE;AAAM,QAAA,SAAS,EAAEO;AAAjB,SAAqCX,KAArC,GACGN,KAAK,CAACkB,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6B,KAAKT,iBAAlC,CADH,CADF;AAKD;AAhCH;;AAAA;AAAA,EAA0BN,SAA1B;;gBAAaI,I,kBACoC;AAC7CK,EAAAA,IAAI,EAAE;AADuC,C","sourcesContent":["import React, { Component, FormHTMLAttributes } from 'react';\nimport classnames from 'classnames';\nimport { FormElement } from './FormElement';\nimport { uuid } from './util';\n\nexport type FormProps = {\n  type?: 'stacked' | 'horizontal' | 'inline' | 'compound';\n} & FormHTMLAttributes<HTMLFormElement>;\n\nexport class Form extends Component<FormProps, {}> {\n  static defaultProps: Pick<FormProps, 'type'> = {\n    type: 'stacked',\n  };\n\n  constructor(props: Readonly<FormProps>) {\n    super(props);\n\n    this.renderFormElement = this.renderFormElement.bind(this);\n  }\n\n  renderFormElement(element: any) {\n    if (element && !element.type.isFormElement) {\n      const { id = `form-element-${uuid()}` } = element.props;\n      const formElemProps = { id };\n      return (\n        <FormElement {...formElemProps}>\n          {React.cloneElement(element, { id })}\n        </FormElement>\n      );\n    }\n    return element;\n  }\n\n  render() {\n    const { className, type, children, ...props } = this.props;\n    const formClassNames = classnames(className, `slds-form_${type}`);\n    return (\n      <form className={formClassNames} {...props}>\n        {React.Children.map(children, this.renderFormElement)}\n      </form>\n    );\n  }\n}\n"],"file":"Form.js"}