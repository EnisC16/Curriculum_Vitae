import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import { FormElement } from './FormElement';
export var Checkbox = /*#__PURE__*/function (_Component) {
  _inherits(Checkbox, _Component);

  var _super = _createSuper(Checkbox);

  function Checkbox() {
    var _this;

    _classCallCheck(this, Checkbox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "node", null);

    return _this;
  }

  _createClass(Checkbox, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.node) {
        var input = this.node.getElementsByTagName('input')[0];

        if (nextProps.defaultChecked !== undefined && nextProps.defaultChecked !== input.checked) {
          input.checked = nextProps.defaultChecked;
        }
      }
    }
  }, {
    key: "renderCheckbox",
    value: function renderCheckbox(_ref) {
      var _this2 = this;

      var className = _ref.className,
          label = _ref.label,
          checkboxRef = _ref.checkboxRef,
          props = _objectWithoutProperties(_ref, ["className", "label", "checkboxRef"]);

      var checkClassNames = classnames(className, 'slds-checkbox');
      return /*#__PURE__*/React.createElement("label", {
        ref: function ref(node) {
          _this2.node = node;
          if (checkboxRef) checkboxRef(node);
        },
        className: checkClassNames
      }, /*#__PURE__*/React.createElement("input", _extends({
        type: "checkbox"
      }, props)), /*#__PURE__*/React.createElement("span", {
        className: "slds-checkbox_faux"
      }), /*#__PURE__*/React.createElement("span", {
        className: "slds-form-element__label"
      }, label));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          grouped = _this$props.grouped,
          required = _this$props.required,
          error = _this$props.error,
          totalCols = _this$props.totalCols,
          cols = _this$props.cols,
          props = _objectWithoutProperties(_this$props, ["grouped", "required", "error", "totalCols", "cols"]);

      var formElemProps = {
        required: required,
        error: error,
        totalCols: totalCols,
        cols: cols
      };
      return grouped ? this.renderCheckbox(props) : /*#__PURE__*/React.createElement(FormElement, _extends({
        formElementRef: function formElementRef(node) {
          return _this3.node = node;
        }
      }, formElemProps), this.renderCheckbox(props));
    }
  }]);

  return Checkbox;
}(Component);
//# sourceMappingURL=Checkbox.js.map